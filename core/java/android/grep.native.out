app/ApplicationThreadNative.java:public abstract class ApplicationThreadNative extends Binder
app/ApplicationThreadNative.java:    public ApplicationThreadNative() {
app/SearchManager.java: *                         above the search box. As an alternative, you may
app/IActivityManager.java:import android.content.ContentProviderNative;
app/IActivityManager.java:            provider = ContentProviderNative.asInterface(
app/IActivityManager.java:    // Remaining non-native transaction codes.
app/ActivityManager.java:            return ActivityManagerNative.getDefault().getRecentTasks(maxNum,
app/ActivityManager.java:            return (List<RunningTaskInfo>)ActivityManagerNative.getDefault()
app/ActivityManager.java:            return (List<RunningServiceInfo>)ActivityManagerNative.getDefault()
app/ActivityManager.java:            return ActivityManagerNative.getDefault()
app/ActivityManager.java:            ActivityManagerNative.getDefault().getMemoryInfo(outInfo);
app/ActivityManager.java:            return ActivityManagerNative.getDefault().clearApplicationUserData(packageName, 
app/ActivityManager.java:            return ActivityManagerNative.getDefault().getProcessesInErrorState();
app/ActivityManager.java:            return ActivityManagerNative.getDefault().getRunningAppProcesses();
app/ActivityManager.java:            return ActivityManagerNative.getDefault().getProcessMemoryInfo(pids);
app/ActivityManager.java:            ActivityManagerNative.getDefault().restartPackage(packageName);
app/ActivityManager.java:            return ActivityManagerNative.getDefault().getDeviceConfigurationInfo();
app/SearchDialog.java:            int result = ActivityManagerNative.getDefault().startActivityInPackage(
app/Activity.java:                ActivityManagerNative.getDefault()
app/Activity.java:            int result = ActivityManagerNative.getDefault()
app/Activity.java:                result = ActivityManagerNative.getDefault()
app/Activity.java:                return ActivityManagerNative.getDefault()
app/Activity.java:            ActivityManagerNative.getDefault().overridePendingTransition(
app/Activity.java:            return ActivityManagerNative.getDefault().getCallingPackage(mToken);
app/Activity.java:            return ActivityManagerNative.getDefault().getCallingActivity(mToken);
app/Activity.java:                if (ActivityManagerNative.getDefault()
app/Activity.java:                ActivityManagerNative.getDefault()
app/Activity.java:            ActivityManagerNative.getDefault()
app/Activity.java:                ActivityManagerNative.getDefault().getIntentSender(
app/Activity.java:                ActivityManagerNative.getDefault().setRequestedOrientation(
app/Activity.java:                return ActivityManagerNative.getDefault()
app/Activity.java:            return ActivityManagerNative.getDefault()
app/Activity.java:            return ActivityManagerNative.getDefault()
app/Activity.java:            return ActivityManagerNative.getDefault().moveActivityTaskToBack(
app/Instrumentation.java:            int result = ActivityManagerNative.getDefault()
app/Instrumentation.java:            IActivityManager am = ActivityManagerNative.getDefault();
app/PendingIntent.java:                ActivityManagerNative.getDefault().getIntentSender(
app/PendingIntent.java:                ActivityManagerNative.getDefault().getIntentSender(
app/PendingIntent.java:                ActivityManagerNative.getDefault().getIntentSender(
app/PendingIntent.java:            ActivityManagerNative.getDefault().cancelIntentSender(mTarget);
app/PendingIntent.java:            return ActivityManagerNative.getDefault()
app/ApplicationContext.java:            int result = ActivityManagerNative.getDefault()
app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
app/ApplicationContext.java:            ActivityManagerNative.getDefault().unbroadcastIntent(
app/ApplicationContext.java:            return ActivityManagerNative.getDefault().registerReceiver(
app/ApplicationContext.java:                ActivityManagerNative.getDefault().unregisterReceiver(rd);
app/ApplicationContext.java:            ComponentName cn = ActivityManagerNative.getDefault().startService(
app/ApplicationContext.java:            int res = ActivityManagerNative.getDefault().stopService(
app/ApplicationContext.java:            int res = ActivityManagerNative.getDefault().bindService(
app/ApplicationContext.java:                ActivityManagerNative.getDefault().unbindService(sd);
app/ApplicationContext.java:            return ActivityManagerNative.getDefault().startInstrumentation(
app/ApplicationContext.java:            return ActivityManagerNative.getDefault().checkPermission(
app/ApplicationContext.java:            ActivityManagerNative.getDefault().grantUriPermission(
app/ApplicationContext.java:            ActivityManagerNative.getDefault().revokeUriPermission(
app/ApplicationContext.java:            return ActivityManagerNative.getDefault().checkUriPermission(
app/ActivityThread.java:                        ActivityManagerNative.getDefault().unregisterReceiver(
app/ActivityThread.java:                        ActivityManagerNative.getDefault().unbindService(
app/ActivityThread.java:                        IActivityManager mgr = ActivityManagerNative.getDefault();
app/ActivityThread.java:                    IActivityManager mgr = ActivityManagerNative.getDefault();
app/ActivityThread.java:                        IActivityManager mgr = ActivityManagerNative.getDefault();
app/ActivityThread.java:    private final class ApplicationThread extends ApplicationThreadNative {
app/ActivityThread.java:                ActivityManagerNative.getDefault().reportPss(this,
app/ActivityThread.java:            long nativeMax = Debug.getNativeHeapSize() / 1024;
app/ActivityThread.java:            long nativeAllocated = Debug.getNativeHeapAllocatedSize() / 1024;
app/ActivityThread.java:            long nativeFree = Debug.getNativeHeapFreeSize() / 1024;
app/ActivityThread.java:            final int nativeShared = memInfo.nativeSharedDirty;
app/ActivityThread.java:            final int nativePrivate = memInfo.nativePrivateDirty;
app/ActivityThread.java:                pw.print(nativeMax); pw.print(',');
app/ActivityThread.java:                pw.print(nativeMax + dalvikMax); pw.print(',');
app/ActivityThread.java:                pw.print(nativeAllocated); pw.print(',');
app/ActivityThread.java:                pw.print(nativeAllocated + dalvikAllocated); pw.print(',');
app/ActivityThread.java:                pw.print(nativeFree); pw.print(',');
app/ActivityThread.java:                pw.print(nativeFree + dalvikFree); pw.print(',');
app/ActivityThread.java:                pw.print(memInfo.nativePss); pw.print(',');
app/ActivityThread.java:                pw.print(memInfo.nativePss + memInfo.dalvikPss + memInfo.otherPss); pw.print(',');
app/ActivityThread.java:                pw.print(nativeShared); pw.print(',');
app/ActivityThread.java:                pw.print(nativeShared + dalvikShared + otherShared); pw.print(',');
app/ActivityThread.java:                pw.print(nativePrivate); pw.print(',');
app/ActivityThread.java:                pw.print(nativePrivate + dalvikPrivate + otherPrivate); pw.print(',');
app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "", "native", "dalvik", "other", "total");
app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "size:", nativeMax, dalvikMax, "N/A", nativeMax + dalvikMax);
app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "allocated:", nativeAllocated, dalvikAllocated, "N/A",
app/ActivityThread.java:                    nativeAllocated + dalvikAllocated);
app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "free:", nativeFree, dalvikFree, "N/A",
app/ActivityThread.java:                    nativeFree + dalvikFree);
app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "(Pss):", memInfo.nativePss, memInfo.dalvikPss,
app/ActivityThread.java:                    memInfo.otherPss, memInfo.nativePss + memInfo.dalvikPss + memInfo.otherPss);
app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "(shared dirty):", nativeShared, dalvikShared, otherShared,
app/ActivityThread.java:                    nativeShared + dalvikShared + otherShared);
app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "(priv dirty):", nativePrivate, dalvikPrivate, otherPrivate,
app/ActivityThread.java:                    nativePrivate + dalvikPrivate + otherPrivate);
app/ActivityThread.java:                IActivityManager am = ActivityManagerNative.getDefault();
app/ActivityThread.java:                ActivityManagerNative.getDefault()
app/ActivityThread.java:        IActivityManager mgr = ActivityManagerNative.getDefault();
app/ActivityThread.java:                ActivityManagerNative.getDefault().backupAgentCreated(packageName, binder);
app/ActivityThread.java:                    ActivityManagerNative.getDefault());
app/ActivityThread.java:                ActivityManagerNative.getDefault().serviceDoneExecuting(
app/ActivityThread.java:                        ActivityManagerNative.getDefault().publishService(
app/ActivityThread.java:                        ActivityManagerNative.getDefault().serviceDoneExecuting(
app/ActivityThread.java:                        ActivityManagerNative.getDefault().unbindFinished(
app/ActivityThread.java:                        ActivityManagerNative.getDefault().serviceDoneExecuting(
app/ActivityThread.java:                    ActivityManagerNative.getDefault().serviceDoneExecuting(
app/ActivityThread.java:                    ActivityManagerNative.getDefault().serviceDoneExecuting(
app/ActivityThread.java:                ActivityManagerNative.getDefault()
app/ActivityThread.java:                ActivityManagerNative.getDefault().activityPaused(token, state);
app/ActivityThread.java:            ActivityManagerNative.getDefault().activityStopped(
app/ActivityThread.java:                ActivityManagerNative.getDefault().activityDestroyed(token);
app/ActivityThread.java:            ActivityManagerNative.getDefault().reportThumbnail(
app/ActivityThread.java:                IActivityManager mgr = ActivityManagerNative.getDefault();
app/ActivityThread.java:        IActivityManager am = ActivityManagerNative.getDefault();
app/ActivityThread.java:        //Log.i(TAG, "am: " + ActivityManagerNative.getDefault()
app/ActivityThread.java:            ActivityManagerNative.getDefault().publishContentProviders(
app/ActivityThread.java:            holder = ActivityManagerNative.getDefault().getContentProvider(
app/ActivityThread.java:                        "ActivityManagerNative.removeContentProvider(" + name);
app/ActivityThread.java:                ActivityManagerNative.getDefault().removeContentProvider(
app/ActivityThread.java:            IActivityManager mgr = ActivityManagerNative.getDefault();
app/ActivityManagerNative.java:public abstract class ActivityManagerNative extends Binder implements IActivityManager
app/ActivityManagerNative.java:    public ActivityManagerNative()
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:                b != null ? ApplicationThreadNative.asInterface(b) : null;
app/ActivityManagerNative.java:                b != null ? ApplicationThreadNative.asInterface(b) : null;
app/ActivityManagerNative.java:            IApplicationThread app = b != null ? ApplicationThreadNative.asInterface(b) : null;
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
backup/BackupDataOutput.java:            throw new RuntimeException("Native initialization failed with fd=" + fd);
backup/BackupDataOutput.java:        int result = writeEntityHeader_native(mBackupWriter, key, dataSize);
backup/BackupDataOutput.java:        int result = writeEntityData_native(mBackupWriter, data, size);
backup/BackupDataOutput.java:        setKeyPrefix_native(mBackupWriter, keyPrefix);
backup/BackupDataOutput.java:    private native static int ctor(FileDescriptor fd);
backup/BackupDataOutput.java:    private native static void dtor(int mBackupWriter);
backup/BackupDataOutput.java:    private native static int writeEntityHeader_native(int mBackupWriter, String key, int dataSize);
backup/BackupDataOutput.java:    private native static int writeEntityData_native(int mBackupWriter, byte[] data, int size);
backup/BackupDataOutput.java:    private native static void setKeyPrefix_native(int mBackupWriter, String keyPrefix);
backup/BackupDataInput.java:            throw new RuntimeException("Native initialization failed with fd=" + fd);
backup/BackupDataInput.java:        int result = readNextHeader_native(mBackupReader, mHeader);
backup/BackupDataInput.java:            int result = readEntityData_native(mBackupReader, data, offset, size);
backup/BackupDataInput.java:            skipEntityData_native(mBackupReader);
backup/BackupDataInput.java:    private native static int ctor(FileDescriptor fd);
backup/BackupDataInput.java:    private native static void dtor(int mBackupReader);
backup/BackupDataInput.java:    private native int readNextHeader_native(int mBackupReader, EntityHeader entity);
backup/BackupDataInput.java:    private native int readEntityData_native(int mBackupReader, byte[] data, int offset, int size);
backup/BackupDataInput.java:    private native int skipEntityData_native(int mBackupReader);
backup/BackupHelperDispatcher.java:            while ((err = readHeader_native(header, oldStateFD)) >= 0) {
backup/BackupHelperDispatcher.java:                        skipChunk_native(oldStateFD, header.chunkSize);
backup/BackupHelperDispatcher.java:        int pos = allocateHeader_native(header, newStateFD);
backup/BackupHelperDispatcher.java:            throw new IOException("allocateHeader_native failed (error " + pos + ")");
backup/BackupHelperDispatcher.java:        err = writeHeader_native(header, newStateFD, pos);
backup/BackupHelperDispatcher.java:            throw new IOException("writeHeader_native failed (error " + err + ")");
backup/BackupHelperDispatcher.java:    private static native int readHeader_native(Header h, FileDescriptor fd);
backup/BackupHelperDispatcher.java:    private static native int skipChunk_native(FileDescriptor fd, int bytesToSkip);
backup/BackupHelperDispatcher.java:    private static native int allocateHeader_native(Header h, FileDescriptor fd);
backup/BackupHelperDispatcher.java:    private static native int writeHeader_native(Header h, FileDescriptor fd, int pos);
backup/FileBackupHelperBase.java:     * Check the parameters so the native code doens't have to throw all the exceptions
backup/FileBackupHelperBase.java:        int err = performBackup_native(oldStateFd, data.mBackupWriter, newStateFd, files, keys);
backup/FileBackupHelperBase.java:        result = writeFile_native(mPtr, f.getAbsolutePath(),
backup/FileBackupHelperBase.java:        int result = writeSnapshot_native(mPtr, fd.getFileDescriptor());
backup/FileBackupHelperBase.java:    private static native int ctor();
backup/FileBackupHelperBase.java:    private static native void dtor(int ptr);
backup/FileBackupHelperBase.java:    native private static int performBackup_native(FileDescriptor oldState,
backup/FileBackupHelperBase.java:    private static native int writeFile_native(int ptr, String filename, int backupReader);
backup/FileBackupHelperBase.java:    private static native int writeSnapshot_native(int ptr, FileDescriptor fd);
bluetooth/ScoSocket.java:    private int mNativeData;
bluetooth/ScoSocket.java:        classInitNative();
bluetooth/ScoSocket.java:    private native static void classInitNative();
bluetooth/ScoSocket.java:        initNative();
bluetooth/ScoSocket.java:    private native void initNative();
bluetooth/ScoSocket.java:            destroyNative();
bluetooth/ScoSocket.java:    private native void destroyNative();
bluetooth/ScoSocket.java:        if (connectNative(address)) {
bluetooth/ScoSocket.java:    private native boolean connectNative(String address);
bluetooth/ScoSocket.java:        if (acceptNative()) {
bluetooth/ScoSocket.java:    private native boolean acceptNative();
bluetooth/ScoSocket.java:        closeNative();
bluetooth/ScoSocket.java:    private native void closeNative();
bluetooth/BluetoothSocket.java:    /** prevents all native calls after destroyNative() */
bluetooth/BluetoothSocket.java:    /** used by native code only */
bluetooth/BluetoothSocket.java:            initSocketNative();
bluetooth/BluetoothSocket.java:            initSocketFromFdNative(fd);
bluetooth/BluetoothSocket.java:     * Construct a BluetoothSocket from address. Used by native code.
bluetooth/BluetoothSocket.java:            connectNative();  // blocks
bluetooth/BluetoothSocket.java:            abortNative();
bluetooth/BluetoothSocket.java:        // all native calls are guaranteed to immediately return after
bluetooth/BluetoothSocket.java:        // abortNative(), so this lock should immediatley acquire
bluetooth/BluetoothSocket.java:            destroyNative();
bluetooth/BluetoothSocket.java:            return bindListenNative();
bluetooth/BluetoothSocket.java:            return acceptNative(timeout);
bluetooth/BluetoothSocket.java:            return availableNative();
bluetooth/BluetoothSocket.java:            return readNative(b, offset, length);
bluetooth/BluetoothSocket.java:            return writeNative(b, offset, length);
bluetooth/BluetoothSocket.java:    private native void initSocketNative() throws IOException;
bluetooth/BluetoothSocket.java:    private native void initSocketFromFdNative(int fd) throws IOException;
bluetooth/BluetoothSocket.java:    private native void connectNative() throws IOException;
bluetooth/BluetoothSocket.java:    private native int bindListenNative();
bluetooth/BluetoothSocket.java:    private native BluetoothSocket acceptNative(int timeout) throws IOException;
bluetooth/BluetoothSocket.java:    private native int availableNative() throws IOException;
bluetooth/BluetoothSocket.java:    private native int readNative(byte[] b, int offset, int length) throws IOException;
bluetooth/BluetoothSocket.java:    private native int writeNative(byte[] b, int offset, int length) throws IOException;
bluetooth/BluetoothSocket.java:    private native void abortNative() throws IOException;
bluetooth/BluetoothSocket.java:    private native void destroyNative() throws IOException;
bluetooth/BluetoothSocket.java:     * Throws an IOException for given posix errno. Done natively so we can
bluetooth/BluetoothSocket.java:    /*package*/ native void throwErrnoNative(int errno) throws IOException;
bluetooth/HeadsetBase.java:    private final String mAddress;  // for native code
bluetooth/HeadsetBase.java:    private int mNativeData;
bluetooth/HeadsetBase.java:    private native static void classInitNative();
bluetooth/HeadsetBase.java:        classInitNative();
bluetooth/HeadsetBase.java:            cleanupNativeDataNative();
bluetooth/HeadsetBase.java:    private native void cleanupNativeDataNative();
bluetooth/HeadsetBase.java:        initializeNativeDataNative(-1);
bluetooth/HeadsetBase.java:        initializeNativeDataNative(socketFd);
bluetooth/HeadsetBase.java:    private native void initializeNativeDataNative(int socketFd);
bluetooth/HeadsetBase.java:                        String input = readNative(500);
bluetooth/HeadsetBase.java:                            last_read_error = getLastReadStatusNative();
bluetooth/HeadsetBase.java:                                disconnectNative();
bluetooth/HeadsetBase.java:    private native String readNative(int timeout_ms);
bluetooth/HeadsetBase.java:    private native int getLastReadStatusNative();
bluetooth/HeadsetBase.java:            if (!connectNative()) return false;
bluetooth/HeadsetBase.java:    private native boolean connectNative();
bluetooth/HeadsetBase.java:        int ret = connectAsyncNative();
bluetooth/HeadsetBase.java:    private native int connectAsyncNative();
bluetooth/HeadsetBase.java:        int res = waitForAsyncConnectNative(timeout_ms);
bluetooth/HeadsetBase.java:    private native int waitForAsyncConnectNative(int timeout_ms);
bluetooth/HeadsetBase.java:        disconnectNative();
bluetooth/HeadsetBase.java:    private native void disconnectNative();
bluetooth/HeadsetBase.java:            boolean ret = sendURCNative(urc);
bluetooth/HeadsetBase.java:    private native boolean sendURCNative(String urc);
bluetooth/BluetoothAudioGateway.java:    private int mNativeData;
bluetooth/BluetoothAudioGateway.java:    static { classInitNative(); }
bluetooth/BluetoothAudioGateway.java:    /* out - written by native code */
bluetooth/BluetoothAudioGateway.java:        initializeNativeDataNative();
bluetooth/BluetoothAudioGateway.java:                            if (waitForHandsfreeConnectNative(SELECT_WAIT_TIMEOUT) == false) {
bluetooth/BluetoothAudioGateway.java:            if (setUpListeningSocketsNative() == false) {
bluetooth/BluetoothAudioGateway.java:                tearDownListeningSocketsNative();
bluetooth/BluetoothAudioGateway.java:            cleanupNativeDataNative();
bluetooth/BluetoothAudioGateway.java:    private static native void classInitNative();
bluetooth/BluetoothAudioGateway.java:    private native void initializeNativeDataNative();
bluetooth/BluetoothAudioGateway.java:    private native void cleanupNativeDataNative();
bluetooth/BluetoothAudioGateway.java:    private native boolean waitForHandsfreeConnectNative(int timeoutMs);
bluetooth/BluetoothAudioGateway.java:    private native boolean setUpListeningSocketsNative();
bluetooth/BluetoothAudioGateway.java:    private native void tearDownListeningSocketsNative();
bluetooth/BluetoothAdapter.java:            socket.mSocket.throwErrnoNative(errno);
bluetooth/BluetoothAdapter.java:                socket.mSocket.throwErrnoNative(errno);  // Exception as a result of bindListen()
bluetooth/BluetoothAdapter.java:            socket.mSocket.throwErrnoNative(errno);
bluetooth/BluetoothAdapter.java:            socket.mSocket.throwErrnoNative(errno);
content/Intent.java: *         {@link #CATEGORY_ALTERNATIVE} means it should be included in a list
content/Intent.java: *         of alternative actions the user can perform on a piece of data.</p>
content/Intent.java: *         {@link #CATEGORY_ALTERNATIVE}, then you will only resolve to components
content/Intent.java: *                 &lt;category android:name="android.intent.category.ALTERNATIVE" /&gt;
content/Intent.java: *                 &lt;category android:name="android.intent.category.SELECTED_ALTERNATIVE" /&gt;
content/Intent.java: * the Intent), but here we show a way you can publish alternative
content/Intent.java: *     &lt;category android:name="{@link #CATEGORY_ALTERNATIVE android.intent.category.ALTERNATIVE}" /&gt;
content/Intent.java: *     &lt;category android:name="{@link #CATEGORY_SELECTED_ALTERNATIVE android.intent.category.SELECTED_ALTERNATIVE}" /&gt;
content/Intent.java: * also supports two other standard categories: ALTERNATIVE and
content/Intent.java: * SELECTED_ALTERNATIVE.  Implementing
content/Intent.java: * what the user sees when presented with this activity as an alternative
content/Intent.java: *     <li> {@link #CATEGORY_ALTERNATIVE}
content/Intent.java: *     <li> {@link #CATEGORY_SELECTED_ALTERNATIVE}
content/Intent.java:     * what they want to before proceeding.  This can be used as an alternative
content/Intent.java:     * Set if the activity should be considered as an alternative action to
content/Intent.java:     * {@link #CATEGORY_SELECTED_ALTERNATIVE} for an alternative action that
content/Intent.java:     * displayed in the set of alternative things the user can do, usually as
content/Intent.java:     * alternative of any particular action will be shown to the user, so using
content/Intent.java:     * a specific action like this makes sure that your alternative will be
content/Intent.java:    public static final String CATEGORY_ALTERNATIVE = "android.intent.category.ALTERNATIVE";
content/Intent.java:     * Set if the activity should be considered as an alternative selection
content/Intent.java:     * {@link #CATEGORY_ALTERNATIVE}, but is used in activities showing a list
content/Intent.java:     * of items from which the user can select, giving them alternatives to the
content/Intent.java:    public static final String CATEGORY_SELECTED_ALTERNATIVE = "android.intent.category.SELECTED_ALTERNATIVE";
content/ContentProvider.java:    class Transport extends ContentProviderNative {
content/res/XmlBlock.java:        mNative = nativeCreate(data, 0, data.length);
content/res/XmlBlock.java:        mStrings = new StringBlock(nativeGetStringBlock(mNative), false);
content/res/XmlBlock.java:        mNative = nativeCreate(data, offset, size);
content/res/XmlBlock.java:        mStrings = new StringBlock(nativeGetStringBlock(mNative), false);
content/res/XmlBlock.java:            nativeDestroy(mNative);
content/res/XmlBlock.java:            if (mNative != 0) {
content/res/XmlBlock.java:                return new Parser(nativeCreateParseState(mNative), this);
content/res/XmlBlock.java:            int id = nativeGetText(mParseState);
content/res/XmlBlock.java:            return nativeGetLineNumber(mParseState);
content/res/XmlBlock.java:            int id = nativeGetNamespace(mParseState);
content/res/XmlBlock.java:            int id = nativeGetName(mParseState);
content/res/XmlBlock.java:            int id = nativeGetAttributeNamespace(mParseState, index);
content/res/XmlBlock.java:            int id = nativeGetAttributeName(mParseState, index);
content/res/XmlBlock.java:            return mEventType == START_TAG ? nativeGetAttributeCount(mParseState) : -1;
content/res/XmlBlock.java:            int id = nativeGetAttributeStringValue(mParseState, index);
content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, index);
content/res/XmlBlock.java:            int v = nativeGetAttributeData(mParseState, index);
content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, name);
content/res/XmlBlock.java:            int ev = nativeNext(mParseState);
content/res/XmlBlock.java:            return nativeGetAttributeResource(mParseState, index);
content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
content/res/XmlBlock.java:            int v = nativeGetAttributeData(mParseState, idx);
content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
content/res/XmlBlock.java:                return nativeGetAttributeData(mParseState, idx) != 0;
content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
content/res/XmlBlock.java:                return nativeGetAttributeData(mParseState, idx);
content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
content/res/XmlBlock.java:                return nativeGetAttributeData(mParseState, idx);
content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
content/res/XmlBlock.java:                return nativeGetAttributeData(mParseState, idx);
content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
content/res/XmlBlock.java:                    nativeGetAttributeData(mParseState, idx));
content/res/XmlBlock.java:            int id = nativeGetIdAttribute(mParseState);
content/res/XmlBlock.java:            int id = nativeGetClassAttribute(mParseState);
content/res/XmlBlock.java:            //todo: create and use native method
content/res/XmlBlock.java:            return nativeGetStyleAttribute(mParseState);
content/res/XmlBlock.java:                    nativeDestroyParseState(mParseState);
content/res/XmlBlock.java:     * Create from an existing xml block native object.  This is
content/res/XmlBlock.java:     *  are doing!  The given native object must exist for the entire lifetime
content/res/XmlBlock.java:        mNative = xmlBlock;
content/res/XmlBlock.java:        mStrings = new StringBlock(nativeGetStringBlock(xmlBlock), false);
content/res/XmlBlock.java:    private final int mNative;
content/res/XmlBlock.java:    private static final native int nativeCreate(byte[] data,
content/res/XmlBlock.java:    private static final native int nativeGetStringBlock(int obj);
content/res/XmlBlock.java:    private static final native int nativeCreateParseState(int obj);
content/res/XmlBlock.java:    private static final native int nativeNext(int state);
content/res/XmlBlock.java:    private static final native int nativeGetNamespace(int state);
content/res/XmlBlock.java:    private static final native int nativeGetName(int state);
content/res/XmlBlock.java:    private static final native int nativeGetText(int state);
content/res/XmlBlock.java:    private static final native int nativeGetLineNumber(int state);
content/res/XmlBlock.java:    private static final native int nativeGetAttributeCount(int state);
content/res/XmlBlock.java:    private static final native int nativeGetAttributeNamespace(int state, int idx);
content/res/XmlBlock.java:    private static final native int nativeGetAttributeName(int state, int idx);
content/res/XmlBlock.java:    private static final native int nativeGetAttributeResource(int state, int idx);
content/res/XmlBlock.java:    private static final native int nativeGetAttributeDataType(int state, int idx);
content/res/XmlBlock.java:    private static final native int nativeGetAttributeData(int state, int idx);
content/res/XmlBlock.java:    private static final native int nativeGetAttributeStringValue(int state, int idx);
content/res/XmlBlock.java:    private static final native int nativeGetIdAttribute(int state);
content/res/XmlBlock.java:    private static final native int nativeGetClassAttribute(int state);
content/res/XmlBlock.java:    private static final native int nativeGetStyleAttribute(int state);
content/res/XmlBlock.java:    private static final native int nativeGetAttributeIndex(int state, String namespace, String name);
content/res/XmlBlock.java:    private static final native void nativeDestroyParseState(int state);
content/res/XmlBlock.java:    private static final native void nativeDestroy(int obj);
content/res/AssetManager.java:    // For communication with native code.
content/res/AssetManager.java:                mStringBlocks[i] = new StringBlock(getNativeStringBlock(i), true);
content/res/AssetManager.java:    public native final String[] list(String path)
content/res/AssetManager.java:            int asset = openNonAssetNative(cookie, fileName, accessMode);
content/res/AssetManager.java:            ParcelFileDescriptor pfd = openNonAssetFdNative(cookie,
content/res/AssetManager.java:            int xmlBlock = openXmlAssetNative(cookie, fileName);
content/res/AssetManager.java:    public native final int addAssetPath(String path);
content/res/AssetManager.java:    public native final boolean isUpToDate();
content/res/AssetManager.java:    public native final void setLocale(String locale);
content/res/AssetManager.java:    public native final String[] getLocales();
content/res/AssetManager.java:    public native final void setConfiguration(int mcc, int mnc, String locale,
content/res/AssetManager.java:    /*package*/ native final int getResourceIdentifier(String type,
content/res/AssetManager.java:    /*package*/ native final String getResourceName(int resid);
content/res/AssetManager.java:    /*package*/ native final String getResourcePackageName(int resid);
content/res/AssetManager.java:    /*package*/ native final String getResourceTypeName(int resid);
content/res/AssetManager.java:    /*package*/ native final String getResourceEntryName(int resid);
content/res/AssetManager.java:    private native final int openAsset(String fileName, int accessMode);
content/res/AssetManager.java:    private final native ParcelFileDescriptor openAssetFd(String fileName,
content/res/AssetManager.java:    private native final int openNonAssetNative(int cookie, String fileName,
content/res/AssetManager.java:    private native ParcelFileDescriptor openNonAssetFdNative(int cookie,
content/res/AssetManager.java:    private native final void destroyAsset(int asset);
content/res/AssetManager.java:    private native final int readAssetChar(int asset);
content/res/AssetManager.java:    private native final int readAsset(int asset, byte[] b, int off, int len);
content/res/AssetManager.java:    private native final long seekAsset(int asset, long offset, int whence);
content/res/AssetManager.java:    private native final long getAssetLength(int asset);
content/res/AssetManager.java:    private native final long getAssetRemainingLength(int asset);
content/res/AssetManager.java:    private native final int loadResourceValue(int ident, TypedValue outValue,
content/res/AssetManager.java:    private native final int loadResourceBagValue(int ident, int bagEntryId, TypedValue outValue,
content/res/AssetManager.java:    /*package*/ native static final boolean applyStyle(int theme,
content/res/AssetManager.java:    /*package*/ native final boolean retrieveAttributes(
content/res/AssetManager.java:    /*package*/ native final int getArraySize(int resource);
content/res/AssetManager.java:    /*package*/ native final int retrieveArray(int resource, int[] outValues);
content/res/AssetManager.java:    private native final int getStringBlockCount();
content/res/AssetManager.java:    private native final int getNativeStringBlock(int block);
content/res/AssetManager.java:    public native final String getCookieName(int cookie);
content/res/AssetManager.java:    public native static final int getGlobalAssetCount();
content/res/AssetManager.java:    public native static final String getAssetAllocations();
content/res/AssetManager.java:    public native static final int getGlobalAssetManagerCount();
content/res/AssetManager.java:    private native final int newTheme();
content/res/AssetManager.java:    private native final void deleteTheme(int theme);
content/res/AssetManager.java:    /*package*/ native static final void applyThemeStyle(int theme, int styleRes, boolean force);
content/res/AssetManager.java:    /*package*/ native static final void copyTheme(int dest, int source);
content/res/AssetManager.java:    /*package*/ native static final int loadThemeAttributeValue(int theme, int ident,
content/res/AssetManager.java:    /*package*/ native static final void dumpTheme(int theme, int priority, String tag, String prefix);
content/res/AssetManager.java:    private native final int openXmlAssetNative(int cookie, String fileName);
content/res/AssetManager.java:    private native final String[] getArrayStringResource(int arrayRes);
content/res/AssetManager.java:    private native final int[] getArrayStringInfo(int arrayRes);
content/res/AssetManager.java:    /*package*/ native final int[] getArrayIntResource(int arrayRes);
content/res/AssetManager.java:    private native final void init();
content/res/AssetManager.java:    private native final void destroy();
content/res/StringBlock.java:    private final int mNative;
content/res/StringBlock.java:    private final boolean mOwnsNative;
content/res/StringBlock.java:        mNative = nativeCreate(data, 0, data.length);
content/res/StringBlock.java:        mOwnsNative = true;
content/res/StringBlock.java:                + ": " + nativeGetSize(mNative));
content/res/StringBlock.java:        mNative = nativeCreate(data, offset, size);
content/res/StringBlock.java:        mOwnsNative = true;
content/res/StringBlock.java:                + ": " + nativeGetSize(mNative));
content/res/StringBlock.java:                final int num = nativeGetSize(mNative);
content/res/StringBlock.java:            String str = nativeGetString(mNative, idx);
content/res/StringBlock.java:            int[] style = nativeGetStyle(mNative, idx);
content/res/StringBlock.java:                    mStyleIDs.boldId = nativeIndexOfString(mNative, "b");
content/res/StringBlock.java:                    mStyleIDs.italicId = nativeIndexOfString(mNative, "i");
content/res/StringBlock.java:                    mStyleIDs.underlineId = nativeIndexOfString(mNative, "u");
content/res/StringBlock.java:                    mStyleIDs.ttId = nativeIndexOfString(mNative, "tt");
content/res/StringBlock.java:                    mStyleIDs.bigId = nativeIndexOfString(mNative, "big");
content/res/StringBlock.java:                    mStyleIDs.smallId = nativeIndexOfString(mNative, "small");
content/res/StringBlock.java:                    mStyleIDs.supId = nativeIndexOfString(mNative, "sup");
content/res/StringBlock.java:                    mStyleIDs.subId = nativeIndexOfString(mNative, "sub");
content/res/StringBlock.java:                    mStyleIDs.strikeId = nativeIndexOfString(mNative, "strike");
content/res/StringBlock.java:                    mStyleIDs.listItemId = nativeIndexOfString(mNative, "li");
content/res/StringBlock.java:                    mStyleIDs.marqueeId = nativeIndexOfString(mNative, "marquee");
content/res/StringBlock.java:        if (mOwnsNative) {
content/res/StringBlock.java:            nativeDestroy(mNative);
content/res/StringBlock.java:                String tag = nativeGetString(mNative, type);
content/res/StringBlock.java:     * Create from an existing string block native object.  This is
content/res/StringBlock.java:     *  are doing!  The given native object must exist for the entire lifetime
content/res/StringBlock.java:        mNative = obj;
content/res/StringBlock.java:        mOwnsNative = false;
content/res/StringBlock.java:                + ": " + nativeGetSize(mNative));
content/res/StringBlock.java:    private static final native int nativeCreate(byte[] data,
content/res/StringBlock.java:    private static final native int nativeGetSize(int obj);
content/res/StringBlock.java:    private static final native String nativeGetString(int obj, int idx);
content/res/StringBlock.java:    private static final native int[] nativeGetStyle(int obj, int idx);
content/res/StringBlock.java:    private static final native int nativeIndexOfString(int obj, String str);
content/res/StringBlock.java:    private static final native void nativeDestroy(int obj);
content/BroadcastReceiver.java:import android.app.ActivityManagerNative;
content/BroadcastReceiver.java:        IActivityManager am = ActivityManagerNative.getDefault();
content/pm/PackageManager.java:     * the package being installed contains native code, but none that is
content/ContentProviderNative.java:import android.database.BulkCursorNative;
content/ContentProviderNative.java:abstract public class ContentProviderNative extends Binder implements IContentProvider {
content/ContentProviderNative.java:    public ContentProviderNative()
content/ContentProviderNative.java:            bulkCursor = BulkCursorNative.asInterface(bulkCursorBinder);
database/BulkCursorNative.java: * Native implementation of the bulk cursor. This is only for use in implementing
database/BulkCursorNative.java:public abstract class BulkCursorNative extends Binder implements IBulkCursor
database/BulkCursorNative.java:    public BulkCursorNative()
database/CursorToBulkCursorAdaptor.java:public final class CursorToBulkCursorAdaptor extends BulkCursorNative 
database/Cursor.java:     * <p>If the native content of that column is not blob exception may throw
database/Cursor.java:     * <p>If the native content of that column is not text the result will be
database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
database/sqlite/SQLiteQuery.java:                // is not safe in this situation. the native code will ignore maxRead
database/sqlite/SQLiteQuery.java:                int numRows = native_fill_window(window, window.getStartPosition(), mOffsetIndex,
database/sqlite/SQLiteQuery.java:            return native_column_count();
database/sqlite/SQLiteQuery.java:            return native_column_name(columnIndex);
database/sqlite/SQLiteQuery.java:    private final native int native_fill_window(CursorWindow window, 
database/sqlite/SQLiteQuery.java:    private final native int native_column_count();
database/sqlite/SQLiteQuery.java:    private final native String native_column_name(int columnIndex);
database/sqlite/SQLiteDebug.java:    public static native void getPagerStats(PagerStats stats);
database/sqlite/SQLiteDebug.java:    public static native long getHeapSize();
database/sqlite/SQLiteDebug.java:    public static native long getHeapAllocatedSize();
database/sqlite/SQLiteDebug.java:    public static native long getHeapFreeSize();
database/sqlite/SQLiteDebug.java:    public static native void getHeapDirtyPages(int[] pages);
database/sqlite/SQLiteStatement.java:            native_execute();
database/sqlite/SQLiteStatement.java:            native_execute();
database/sqlite/SQLiteStatement.java:            long retValue = native_1x1_long();
database/sqlite/SQLiteStatement.java:            String retValue = native_1x1_string();
database/sqlite/SQLiteStatement.java:    private final native void native_execute();
database/sqlite/SQLiteStatement.java:    private final native long native_1x1_long();
database/sqlite/SQLiteStatement.java:    private final native String native_1x1_string();
database/sqlite/SQLiteProgram.java:     * Native linkage, do not modify. This comes from the database and should not be modified
database/sqlite/SQLiteProgram.java:     * in here or in the native code.
database/sqlite/SQLiteProgram.java:     * Native linkage, do not modify. When non-0 this holds a reference to a valid
database/sqlite/SQLiteProgram.java:     * sqlite3_statement object. It is only updated by the native code, but may be
database/sqlite/SQLiteProgram.java:     * is a valid native-side program or not.
database/sqlite/SQLiteProgram.java:        this.nHandle = db.mNativeHandle;
database/sqlite/SQLiteProgram.java:        // Note that native_finalize() checks to make sure that nStatement is
database/sqlite/SQLiteProgram.java:        native_finalize();
database/sqlite/SQLiteProgram.java:        // Note that native_finalize() checks to make sure that nStatement is
database/sqlite/SQLiteProgram.java:        native_finalize();
database/sqlite/SQLiteProgram.java:                // Note that the native_compile() takes care of destroying any previously
database/sqlite/SQLiteProgram.java:                native_compile(sql);
database/sqlite/SQLiteProgram.java:            native_bind_null(index);
database/sqlite/SQLiteProgram.java:            native_bind_long(index, value);
database/sqlite/SQLiteProgram.java:            native_bind_double(index, value);
database/sqlite/SQLiteProgram.java:            native_bind_string(index, value);
database/sqlite/SQLiteProgram.java:            native_bind_blob(index, value);
database/sqlite/SQLiteProgram.java:            native_clear_bindings();
database/sqlite/SQLiteProgram.java:     * Make sure that the native resource is cleaned up.
database/sqlite/SQLiteProgram.java:    protected final native void native_compile(String sql);
database/sqlite/SQLiteProgram.java:    protected final native void native_finalize();
database/sqlite/SQLiteProgram.java:    protected final native void native_bind_null(int index);
database/sqlite/SQLiteProgram.java:    protected final native void native_bind_long(int index, long value);
database/sqlite/SQLiteProgram.java:    protected final native void native_bind_double(int index, double value);
database/sqlite/SQLiteProgram.java:    protected final native void native_bind_string(int index, String value);
database/sqlite/SQLiteProgram.java:    protected final native void native_bind_blob(int index, byte[] value);
database/sqlite/SQLiteProgram.java:    private final native void native_clear_bindings();
database/sqlite/SQLiteDatabase.java:    public static final int OPEN_READWRITE = 0x00000000;          // update native code if changing
database/sqlite/SQLiteDatabase.java:    public static final int OPEN_READONLY = 0x00000001;           // update native code if changing
database/sqlite/SQLiteDatabase.java:    private static final int OPEN_READ_MASK = 0x00000001;         // update native code if changing
database/sqlite/SQLiteDatabase.java:    public static final int NO_LOCALIZED_COLLATORS = 0x00000010;  // update native code if changing
database/sqlite/SQLiteDatabase.java:    public static final int CREATE_IF_NECESSARY = 0x10000000;     // update native code if changing
database/sqlite/SQLiteDatabase.java:    /** Used by native code, do not rename */
database/sqlite/SQLiteDatabase.java:    /* package */ int mNativeHandle = 0;
database/sqlite/SQLiteDatabase.java:    static public native int releaseMemory();
database/sqlite/SQLiteDatabase.java:     * touch the native sqlite3* object since it is single threaded and uses
database/sqlite/SQLiteDatabase.java:     * touch the native sqlite3* object since it is single threaded and uses
database/sqlite/SQLiteDatabase.java:     * Native call to close the database.
database/sqlite/SQLiteDatabase.java:    private native void dbclose();
database/sqlite/SQLiteDatabase.java:            native_execSQL("SELECT _sync_dirty FROM " + updateTable
database/sqlite/SQLiteDatabase.java:            native_execSQL("SELECT " + foreignKey + " FROM " + table
database/sqlite/SQLiteDatabase.java:            native_execSQL(sql);
database/sqlite/SQLiteDatabase.java:        return mNativeHandle != 0;
database/sqlite/SQLiteDatabase.java:            native_setLocale(locale.toString(), mFlags);
database/sqlite/SQLiteDatabase.java:     * Native call to open the database.
database/sqlite/SQLiteDatabase.java:    private native void dbopen(String path, int flags);
database/sqlite/SQLiteDatabase.java:     * Native call to execute a raw SQL statement. {@link #lock} must be held
database/sqlite/SQLiteDatabase.java:    /* package */ native void native_execSQL(String sql) throws SQLException;
database/sqlite/SQLiteDatabase.java:     * Native call to set the locale.  {@link #lock} must be held when calling
database/sqlite/SQLiteDatabase.java:    /* package */ native void native_setLocale(String loc, int flags);
database/sqlite/SQLiteDatabase.java:    /* package */ native long lastInsertRow();
database/sqlite/SQLiteDatabase.java:    /* package */ native int lastChangeCount();
database/sqlite/SQLiteCursor.java:     * Release the native resources, if they haven't been released yet.
database/sqlite/SQLiteContentHelper.java:    // TODO: make this native and use the SQLite blob API to reduce copying
database/CursorWindow.java:    /** The pointer to the native window class */
database/CursorWindow.java:        native_init(localWindow);
database/CursorWindow.java:            return getNumRows_native();
database/CursorWindow.java:    private native int getNumRows_native();
database/CursorWindow.java:            return setNumColumns_native(columnNum);
database/CursorWindow.java:    private native boolean setNumColumns_native(int columnNum);
database/CursorWindow.java:            return allocRow_native();
database/CursorWindow.java:    private native boolean allocRow_native();    
database/CursorWindow.java:            freeLastRow_native();
database/CursorWindow.java:    private native void freeLastRow_native();
database/CursorWindow.java:            return putBlob_native(value, row - mStartPos, col);
database/CursorWindow.java:    private native boolean putBlob_native(byte[] value, int row, int col);    
database/CursorWindow.java:            return putString_native(value, row - mStartPos, col);
database/CursorWindow.java:    private native boolean putString_native(String value, int row, int col);    
database/CursorWindow.java:            return putLong_native(value, row - mStartPos, col);
database/CursorWindow.java:    private native boolean putLong_native(long value, int row, int col);
database/CursorWindow.java:            return putDouble_native(value, row - mStartPos, col);
database/CursorWindow.java:    private native boolean putDouble_native(double value, int row, int col);    
database/CursorWindow.java:            return putNull_native(row - mStartPos, col);
database/CursorWindow.java:    private native boolean putNull_native(int row, int col);
database/CursorWindow.java:            return isNull_native(row - mStartPos, col);
database/CursorWindow.java:    private native boolean isNull_native(int row, int col);
database/CursorWindow.java:            return getBlob_native(row - mStartPos, col);
database/CursorWindow.java:    private native byte[] getBlob_native(int row, int col);
database/CursorWindow.java:            return isBlob_native(row - mStartPos, col);
database/CursorWindow.java:            return isInteger_native(row - mStartPos, col);
database/CursorWindow.java:            return isFloat_native(row - mStartPos, col);
database/CursorWindow.java:            return isString_native(row - mStartPos, col);
database/CursorWindow.java:    private native boolean isBlob_native(int row, int col);
database/CursorWindow.java:    private native boolean isString_native(int row, int col);
database/CursorWindow.java:    private native boolean isInteger_native(int row, int col);
database/CursorWindow.java:    private native boolean isFloat_native(int row, int col);
database/CursorWindow.java:            return getString_native(row - mStartPos, col);
database/CursorWindow.java:    private native String getString_native(int row, int col);
database/CursorWindow.java:            char[] newbuf = copyStringToBuffer_native(
database/CursorWindow.java:    private native char[] copyStringToBuffer_native(
database/CursorWindow.java:            return getLong_native(row - mStartPos, col);
database/CursorWindow.java:    private native long getLong_native(int row, int col);
database/CursorWindow.java:            return getDouble_native(row - mStartPos, col);
database/CursorWindow.java:    private native double getDouble_native(int row, int col);
database/CursorWindow.java:            return (short) getLong_native(row - mStartPos, col);
database/CursorWindow.java:            return (int) getLong_native(row - mStartPos, col);
database/CursorWindow.java:            return (float) getDouble_native(row - mStartPos, col);
database/CursorWindow.java:            native_clear();
database/CursorWindow.java:    /** Clears out the native side of things */
database/CursorWindow.java:    private native void native_clear();
database/CursorWindow.java:     * Cleans up the native resources associated with the window.
database/CursorWindow.java:    private native void close_native();
database/CursorWindow.java:        close_native();
database/CursorWindow.java:        dest.writeStrongBinder(native_getBinder());
database/CursorWindow.java:        IBinder nativeBinder = source.readStrongBinder();
database/CursorWindow.java:        native_init(nativeBinder);
database/CursorWindow.java:    /** Get the binder for the native side of the window */
database/CursorWindow.java:    private native IBinder native_getBinder();
database/CursorWindow.java:    /** Does the native side initialization for an empty window */
database/CursorWindow.java:    private native void native_init(boolean localOnly);
database/CursorWindow.java:    /** Does the native side initialization with an existing binder from another process */
database/CursorWindow.java:    private native void native_init(IBinder nativeBinder);
database/CursorWindow.java:        close_native();        
ddm/DdmHandleHeap.java: * Handle native and virtual heap requests.
ddm/DdmHandleHeap.java:     * Handle a "HeaP SeGment" or "Native Heap SeGment" request.
ddm/DdmHandleHeap.java:    private Chunk handleHPSGNHSG(Chunk request, boolean isNative) {
ddm/DdmHandleHeap.java:                + ", what=" + what + ", isNative=" + isNative);
ddm/DdmHandleHeap.java:        boolean ok = DdmVmInternal.heapSegmentNotify(when, what, isNative);
ddm/DdmHandleNativeHeap.java:public class DdmHandleNativeHeap extends ChunkHandler {
ddm/DdmHandleNativeHeap.java:    private static DdmHandleNativeHeap mInstance = new DdmHandleNativeHeap();
ddm/DdmHandleNativeHeap.java:    private DdmHandleNativeHeap() {}
ddm/DdmHandleNativeHeap.java:        Log.i("ddm-nativeheap", "Handling " + name(request.type) + " chunk");
ddm/DdmHandleNativeHeap.java:     * Handle a "Native Heap GeT" request.
ddm/DdmHandleNativeHeap.java:            Log.i("ddm-nativeheap", "Sending " + data.length + " bytes");
ddm/DdmHandleNativeHeap.java:    private native byte[] getLeakInfo();
ddm/DdmRegister.java:     * way so that the handlers can use Android classes with native calls
ddm/DdmRegister.java:        DdmHandleNativeHeap.register();
debug/JNITest.java:    private native int part1(int intArg, double doubleArg, String stringArg,
debug/JNITest.java:    private static native int part3(String stringArg);
emoji/EmojiFactory.java:    // A pointer to native EmojiFactory object.
emoji/EmojiFactory.java:    private int mNativeEmojiFactory;
emoji/EmojiFactory.java:     * Private constructor that must received an already allocated native
emoji/EmojiFactory.java:    private EmojiFactory(int nativeEmojiFactory, String name) {
emoji/EmojiFactory.java:        mNativeEmojiFactory = nativeEmojiFactory;
emoji/EmojiFactory.java:            nativeDestructor(mNativeEmojiFactory);
emoji/EmojiFactory.java:            Bitmap ret = nativeGetBitmapFromAndroidPua(mNativeEmojiFactory, pua);
emoji/EmojiFactory.java:                Bitmap ret = nativeGetBitmapFromAndroidPua(mNativeEmojiFactory, pua);
emoji/EmojiFactory.java:        return nativeGetAndroidPuaFromVendorSpecificSjis(mNativeEmojiFactory, sjis);
emoji/EmojiFactory.java:        return nativeGetVendorSpecificSjisFromAndroidPua(mNativeEmojiFactory, pua);
emoji/EmojiFactory.java:        return nativeGetAndroidPuaFromVendorSpecificPua(mNativeEmojiFactory, vsp);
emoji/EmojiFactory.java:        int minVsp = nativeGetMinimumVendorSpecificPua(mNativeEmojiFactory);
emoji/EmojiFactory.java:        int maxVsp = nativeGetMaximumVendorSpecificPua(mNativeEmojiFactory);
emoji/EmojiFactory.java:        return nativeGetVendorSpecificPuaFromAndroidPua(mNativeEmojiFactory, pua);
emoji/EmojiFactory.java:        int minVsp = nativeGetMinimumAndroidPua(mNativeEmojiFactory);
emoji/EmojiFactory.java:        int maxVsp = nativeGetMaximumAndroidPua(mNativeEmojiFactory);
emoji/EmojiFactory.java:    public static native EmojiFactory newInstance(String class_name);
emoji/EmojiFactory.java:    public static native EmojiFactory newAvailableInstance();
emoji/EmojiFactory.java:        return nativeGetMinimumAndroidPua(mNativeEmojiFactory);
emoji/EmojiFactory.java:        return nativeGetMaximumAndroidPua(mNativeEmojiFactory);
emoji/EmojiFactory.java:    // native methods
emoji/EmojiFactory.java:    private native void nativeDestructor(int factory);
emoji/EmojiFactory.java:    private native Bitmap nativeGetBitmapFromAndroidPua(int nativeEmojiFactory, int AndroidPua);
emoji/EmojiFactory.java:    private native int nativeGetAndroidPuaFromVendorSpecificSjis(int nativeEmojiFactory,
emoji/EmojiFactory.java:    private native int nativeGetVendorSpecificSjisFromAndroidPua(int nativeEmojiFactory,
emoji/EmojiFactory.java:    private native int nativeGetAndroidPuaFromVendorSpecificPua(int nativeEmojiFactory,
emoji/EmojiFactory.java:    private native int nativeGetVendorSpecificPuaFromAndroidPua(int nativeEmojiFactory,
emoji/EmojiFactory.java:    private native int nativeGetMaximumVendorSpecificPua(int nativeEmojiFactory);
emoji/EmojiFactory.java:    private native int nativeGetMinimumVendorSpecificPua(int nativeEmojiFactory);
emoji/EmojiFactory.java:    private native int nativeGetMaximumAndroidPua(int nativeEmojiFactory);
emoji/EmojiFactory.java:    private native int nativeGetMinimumAndroidPua(int nativeEmojiFactory);
grep.native.out:app/ApplicationThreadNative.java:public abstract class ApplicationThreadNative extends Binder
grep.native.out:app/ApplicationThreadNative.java:    public ApplicationThreadNative() {
grep.native.out:app/SearchManager.java: *                         above the search box. As an alternative, you may
grep.native.out:app/IActivityManager.java:import android.content.ContentProviderNative;
grep.native.out:app/IActivityManager.java:            provider = ContentProviderNative.asInterface(
grep.native.out:app/IActivityManager.java:    // Remaining non-native transaction codes.
grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getRecentTasks(maxNum,
grep.native.out:app/ActivityManager.java:            return (List<RunningTaskInfo>)ActivityManagerNative.getDefault()
grep.native.out:app/ActivityManager.java:            return (List<RunningServiceInfo>)ActivityManagerNative.getDefault()
grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault()
grep.native.out:app/ActivityManager.java:            ActivityManagerNative.getDefault().getMemoryInfo(outInfo);
grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().clearApplicationUserData(packageName, 
grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getProcessesInErrorState();
grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getRunningAppProcesses();
grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getProcessMemoryInfo(pids);
grep.native.out:app/ActivityManager.java:            ActivityManagerNative.getDefault().restartPackage(packageName);
grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getDeviceConfigurationInfo();
grep.native.out:app/SearchDialog.java:            int result = ActivityManagerNative.getDefault().startActivityInPackage(
grep.native.out:app/Activity.java:                ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:            int result = ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:                result = ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:                return ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:            ActivityManagerNative.getDefault().overridePendingTransition(
grep.native.out:app/Activity.java:            return ActivityManagerNative.getDefault().getCallingPackage(mToken);
grep.native.out:app/Activity.java:            return ActivityManagerNative.getDefault().getCallingActivity(mToken);
grep.native.out:app/Activity.java:                if (ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:                ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:            ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:                ActivityManagerNative.getDefault().getIntentSender(
grep.native.out:app/Activity.java:                ActivityManagerNative.getDefault().setRequestedOrientation(
grep.native.out:app/Activity.java:                return ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:            return ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:            return ActivityManagerNative.getDefault()
grep.native.out:app/Activity.java:            return ActivityManagerNative.getDefault().moveActivityTaskToBack(
grep.native.out:app/Instrumentation.java:            int result = ActivityManagerNative.getDefault()
grep.native.out:app/Instrumentation.java:            IActivityManager am = ActivityManagerNative.getDefault();
grep.native.out:app/PendingIntent.java:                ActivityManagerNative.getDefault().getIntentSender(
grep.native.out:app/PendingIntent.java:                ActivityManagerNative.getDefault().getIntentSender(
grep.native.out:app/PendingIntent.java:                ActivityManagerNative.getDefault().getIntentSender(
grep.native.out:app/PendingIntent.java:            ActivityManagerNative.getDefault().cancelIntentSender(mTarget);
grep.native.out:app/PendingIntent.java:            return ActivityManagerNative.getDefault()
grep.native.out:app/ApplicationContext.java:            int result = ActivityManagerNative.getDefault()
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().broadcastIntent(
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().unbroadcastIntent(
grep.native.out:app/ApplicationContext.java:            return ActivityManagerNative.getDefault().registerReceiver(
grep.native.out:app/ApplicationContext.java:                ActivityManagerNative.getDefault().unregisterReceiver(rd);
grep.native.out:app/ApplicationContext.java:            ComponentName cn = ActivityManagerNative.getDefault().startService(
grep.native.out:app/ApplicationContext.java:            int res = ActivityManagerNative.getDefault().stopService(
grep.native.out:app/ApplicationContext.java:            int res = ActivityManagerNative.getDefault().bindService(
grep.native.out:app/ApplicationContext.java:                ActivityManagerNative.getDefault().unbindService(sd);
grep.native.out:app/ApplicationContext.java:            return ActivityManagerNative.getDefault().startInstrumentation(
grep.native.out:app/ApplicationContext.java:            return ActivityManagerNative.getDefault().checkPermission(
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().grantUriPermission(
grep.native.out:app/ApplicationContext.java:            ActivityManagerNative.getDefault().revokeUriPermission(
grep.native.out:app/ApplicationContext.java:            return ActivityManagerNative.getDefault().checkUriPermission(
grep.native.out:app/ActivityThread.java:                        ActivityManagerNative.getDefault().unregisterReceiver(
grep.native.out:app/ActivityThread.java:                        ActivityManagerNative.getDefault().unbindService(
grep.native.out:app/ActivityThread.java:                        IActivityManager mgr = ActivityManagerNative.getDefault();
grep.native.out:app/ActivityThread.java:                    IActivityManager mgr = ActivityManagerNative.getDefault();
grep.native.out:app/ActivityThread.java:                        IActivityManager mgr = ActivityManagerNative.getDefault();
grep.native.out:app/ActivityThread.java:    private final class ApplicationThread extends ApplicationThreadNative {
grep.native.out:app/ActivityThread.java:                ActivityManagerNative.getDefault().reportPss(this,
grep.native.out:app/ActivityThread.java:            long nativeMax = Debug.getNativeHeapSize() / 1024;
grep.native.out:app/ActivityThread.java:            long nativeAllocated = Debug.getNativeHeapAllocatedSize() / 1024;
grep.native.out:app/ActivityThread.java:            long nativeFree = Debug.getNativeHeapFreeSize() / 1024;
grep.native.out:app/ActivityThread.java:            final int nativeShared = memInfo.nativeSharedDirty;
grep.native.out:app/ActivityThread.java:            final int nativePrivate = memInfo.nativePrivateDirty;
grep.native.out:app/ActivityThread.java:                pw.print(nativeMax); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativeMax + dalvikMax); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativeAllocated); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativeAllocated + dalvikAllocated); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativeFree); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativeFree + dalvikFree); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(memInfo.nativePss); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(memInfo.nativePss + memInfo.dalvikPss + memInfo.otherPss); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativeShared); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativeShared + dalvikShared + otherShared); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativePrivate); pw.print(',');
grep.native.out:app/ActivityThread.java:                pw.print(nativePrivate + dalvikPrivate + otherPrivate); pw.print(',');
grep.native.out:app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "", "native", "dalvik", "other", "total");
grep.native.out:app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "size:", nativeMax, dalvikMax, "N/A", nativeMax + dalvikMax);
grep.native.out:app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "allocated:", nativeAllocated, dalvikAllocated, "N/A",
grep.native.out:app/ActivityThread.java:                    nativeAllocated + dalvikAllocated);
grep.native.out:app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "free:", nativeFree, dalvikFree, "N/A",
grep.native.out:app/ActivityThread.java:                    nativeFree + dalvikFree);
grep.native.out:app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "(Pss):", memInfo.nativePss, memInfo.dalvikPss,
grep.native.out:app/ActivityThread.java:                    memInfo.otherPss, memInfo.nativePss + memInfo.dalvikPss + memInfo.otherPss);
grep.native.out:app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "(shared dirty):", nativeShared, dalvikShared, otherShared,
grep.native.out:app/ActivityThread.java:                    nativeShared + dalvikShared + otherShared);
grep.native.out:app/ActivityThread.java:            printRow(pw, HEAP_COLUMN, "(priv dirty):", nativePrivate, dalvikPrivate, otherPrivate,
grep.native.out:app/ActivityThread.java:                    nativePrivate + dalvikPrivate + otherPrivate);
grep.native.out:app/ActivityThread.java:                IActivityManager am = ActivityManagerNative.getDefault();
grep.native.out:app/ActivityThread.java:                ActivityManagerNative.getDefault()
grep.native.out:app/ActivityThread.java:        IActivityManager mgr = ActivityManagerNative.getDefault();
grep.native.out:app/ActivityThread.java:                ActivityManagerNative.getDefault().backupAgentCreated(packageName, binder);
grep.native.out:app/ActivityThread.java:                    ActivityManagerNative.getDefault());
grep.native.out:app/ActivityThread.java:                ActivityManagerNative.getDefault().serviceDoneExecuting(
grep.native.out:app/ActivityThread.java:                        ActivityManagerNative.getDefault().publishService(
grep.native.out:app/ActivityThread.java:                        ActivityManagerNative.getDefault().serviceDoneExecuting(
grep.native.out:app/ActivityThread.java:                        ActivityManagerNative.getDefault().unbindFinished(
grep.native.out:app/ActivityThread.java:                        ActivityManagerNative.getDefault().serviceDoneExecuting(
grep.native.out:app/ActivityThread.java:                    ActivityManagerNative.getDefault().serviceDoneExecuting(
grep.native.out:app/ActivityThread.java:                    ActivityManagerNative.getDefault().serviceDoneExecuting(
grep.native.out:app/ActivityThread.java:                ActivityManagerNative.getDefault()
grep.native.out:app/ActivityThread.java:                ActivityManagerNative.getDefault().activityPaused(token, state);
grep.native.out:app/ActivityThread.java:            ActivityManagerNative.getDefault().activityStopped(
grep.native.out:app/ActivityThread.java:                ActivityManagerNative.getDefault().activityDestroyed(token);
grep.native.out:app/ActivityThread.java:            ActivityManagerNative.getDefault().reportThumbnail(
grep.native.out:app/ActivityThread.java:                IActivityManager mgr = ActivityManagerNative.getDefault();
grep.native.out:app/ActivityThread.java:        IActivityManager am = ActivityManagerNative.getDefault();
grep.native.out:app/ActivityThread.java:        //Log.i(TAG, "am: " + ActivityManagerNative.getDefault()
grep.native.out:app/ActivityThread.java:            ActivityManagerNative.getDefault().publishContentProviders(
grep.native.out:app/ActivityThread.java:            holder = ActivityManagerNative.getDefault().getContentProvider(
grep.native.out:app/ActivityThread.java:                        "ActivityManagerNative.removeContentProvider(" + name);
grep.native.out:app/ActivityThread.java:                ActivityManagerNative.getDefault().removeContentProvider(
grep.native.out:app/ActivityThread.java:            IActivityManager mgr = ActivityManagerNative.getDefault();
grep.native.out:app/ActivityManagerNative.java:public abstract class ActivityManagerNative extends Binder implements IActivityManager
grep.native.out:app/ActivityManagerNative.java:    public ActivityManagerNative()
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:                b != null ? ApplicationThreadNative.asInterface(b) : null;
grep.native.out:app/ActivityManagerNative.java:                b != null ? ApplicationThreadNative.asInterface(b) : null;
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = b != null ? ApplicationThreadNative.asInterface(b) : null;
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:app/ActivityManagerNative.java:            IApplicationThread app = ApplicationThreadNative.asInterface(b);
grep.native.out:backup/BackupDataOutput.java:            throw new RuntimeException("Native initialization failed with fd=" + fd);
grep.native.out:backup/BackupDataOutput.java:        int result = writeEntityHeader_native(mBackupWriter, key, dataSize);
grep.native.out:backup/BackupDataOutput.java:        int result = writeEntityData_native(mBackupWriter, data, size);
grep.native.out:backup/BackupDataOutput.java:        setKeyPrefix_native(mBackupWriter, keyPrefix);
grep.native.out:backup/BackupDataOutput.java:    private native static int ctor(FileDescriptor fd);
grep.native.out:backup/BackupDataOutput.java:    private native static void dtor(int mBackupWriter);
grep.native.out:backup/BackupDataOutput.java:    private native static int writeEntityHeader_native(int mBackupWriter, String key, int dataSize);
grep.native.out:backup/BackupDataOutput.java:    private native static int writeEntityData_native(int mBackupWriter, byte[] data, int size);
grep.native.out:backup/BackupDataOutput.java:    private native static void setKeyPrefix_native(int mBackupWriter, String keyPrefix);
grep.native.out:backup/BackupDataInput.java:            throw new RuntimeException("Native initialization failed with fd=" + fd);
grep.native.out:backup/BackupDataInput.java:        int result = readNextHeader_native(mBackupReader, mHeader);
grep.native.out:backup/BackupDataInput.java:            int result = readEntityData_native(mBackupReader, data, offset, size);
grep.native.out:backup/BackupDataInput.java:            skipEntityData_native(mBackupReader);
grep.native.out:backup/BackupDataInput.java:    private native static int ctor(FileDescriptor fd);
grep.native.out:backup/BackupDataInput.java:    private native static void dtor(int mBackupReader);
grep.native.out:backup/BackupDataInput.java:    private native int readNextHeader_native(int mBackupReader, EntityHeader entity);
grep.native.out:backup/BackupDataInput.java:    private native int readEntityData_native(int mBackupReader, byte[] data, int offset, int size);
grep.native.out:backup/BackupDataInput.java:    private native int skipEntityData_native(int mBackupReader);
grep.native.out:backup/BackupHelperDispatcher.java:            while ((err = readHeader_native(header, oldStateFD)) >= 0) {
grep.native.out:backup/BackupHelperDispatcher.java:                        skipChunk_native(oldStateFD, header.chunkSize);
grep.native.out:backup/BackupHelperDispatcher.java:        int pos = allocateHeader_native(header, newStateFD);
grep.native.out:backup/BackupHelperDispatcher.java:            throw new IOException("allocateHeader_native failed (error " + pos + ")");
grep.native.out:backup/BackupHelperDispatcher.java:        err = writeHeader_native(header, newStateFD, pos);
grep.native.out:backup/BackupHelperDispatcher.java:            throw new IOException("writeHeader_native failed (error " + err + ")");
grep.native.out:backup/BackupHelperDispatcher.java:    private static native int readHeader_native(Header h, FileDescriptor fd);
grep.native.out:backup/BackupHelperDispatcher.java:    private static native int skipChunk_native(FileDescriptor fd, int bytesToSkip);
grep.native.out:backup/BackupHelperDispatcher.java:    private static native int allocateHeader_native(Header h, FileDescriptor fd);
grep.native.out:backup/BackupHelperDispatcher.java:    private static native int writeHeader_native(Header h, FileDescriptor fd, int pos);
grep.native.out:backup/FileBackupHelperBase.java:     * Check the parameters so the native code doens't have to throw all the exceptions
grep.native.out:backup/FileBackupHelperBase.java:        int err = performBackup_native(oldStateFd, data.mBackupWriter, newStateFd, files, keys);
grep.native.out:backup/FileBackupHelperBase.java:        result = writeFile_native(mPtr, f.getAbsolutePath(),
grep.native.out:backup/FileBackupHelperBase.java:        int result = writeSnapshot_native(mPtr, fd.getFileDescriptor());
grep.native.out:backup/FileBackupHelperBase.java:    private static native int ctor();
grep.native.out:backup/FileBackupHelperBase.java:    private static native void dtor(int ptr);
grep.native.out:backup/FileBackupHelperBase.java:    native private static int performBackup_native(FileDescriptor oldState,
grep.native.out:backup/FileBackupHelperBase.java:    private static native int writeFile_native(int ptr, String filename, int backupReader);
grep.native.out:backup/FileBackupHelperBase.java:    private static native int writeSnapshot_native(int ptr, FileDescriptor fd);
grep.native.out:bluetooth/ScoSocket.java:    private int mNativeData;
grep.native.out:bluetooth/ScoSocket.java:        classInitNative();
grep.native.out:bluetooth/ScoSocket.java:    private native static void classInitNative();
grep.native.out:bluetooth/ScoSocket.java:        initNative();
grep.native.out:bluetooth/ScoSocket.java:    private native void initNative();
grep.native.out:bluetooth/ScoSocket.java:            destroyNative();
grep.native.out:bluetooth/ScoSocket.java:    private native void destroyNative();
grep.native.out:bluetooth/ScoSocket.java:        if (connectNative(address)) {
grep.native.out:bluetooth/ScoSocket.java:    private native boolean connectNative(String address);
grep.native.out:bluetooth/ScoSocket.java:        if (acceptNative()) {
grep.native.out:bluetooth/ScoSocket.java:    private native boolean acceptNative();
grep.native.out:bluetooth/ScoSocket.java:        closeNative();
grep.native.out:bluetooth/ScoSocket.java:    private native void closeNative();
grep.native.out:bluetooth/BluetoothSocket.java:    /** prevents all native calls after destroyNative() */
grep.native.out:bluetooth/BluetoothSocket.java:    /** used by native code only */
grep.native.out:bluetooth/BluetoothSocket.java:            initSocketNative();
grep.native.out:bluetooth/BluetoothSocket.java:            initSocketFromFdNative(fd);
grep.native.out:bluetooth/BluetoothSocket.java:     * Construct a BluetoothSocket from address. Used by native code.
grep.native.out:bluetooth/BluetoothSocket.java:            connectNative();  // blocks
grep.native.out:bluetooth/BluetoothSocket.java:            abortNative();
grep.native.out:bluetooth/BluetoothSocket.java:        // all native calls are guaranteed to immediately return after
grep.native.out:bluetooth/BluetoothSocket.java:        // abortNative(), so this lock should immediatley acquire
grep.native.out:bluetooth/BluetoothSocket.java:            destroyNative();
grep.native.out:bluetooth/BluetoothSocket.java:            return bindListenNative();
grep.native.out:bluetooth/BluetoothSocket.java:            return acceptNative(timeout);
grep.native.out:bluetooth/BluetoothSocket.java:            return availableNative();
grep.native.out:bluetooth/BluetoothSocket.java:            return readNative(b, offset, length);
grep.native.out:bluetooth/BluetoothSocket.java:            return writeNative(b, offset, length);
grep.native.out:bluetooth/BluetoothSocket.java:    private native void initSocketNative() throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:    private native void initSocketFromFdNative(int fd) throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:    private native void connectNative() throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:    private native int bindListenNative();
grep.native.out:bluetooth/BluetoothSocket.java:    private native BluetoothSocket acceptNative(int timeout) throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:    private native int availableNative() throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:    private native int readNative(byte[] b, int offset, int length) throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:    private native int writeNative(byte[] b, int offset, int length) throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:    private native void abortNative() throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:    private native void destroyNative() throws IOException;
grep.native.out:bluetooth/BluetoothSocket.java:     * Throws an IOException for given posix errno. Done natively so we can
grep.native.out:bluetooth/BluetoothSocket.java:    /*package*/ native void throwErrnoNative(int errno) throws IOException;
grep.native.out:bluetooth/HeadsetBase.java:    private final String mAddress;  // for native code
grep.native.out:bluetooth/HeadsetBase.java:    private int mNativeData;
grep.native.out:bluetooth/HeadsetBase.java:    private native static void classInitNative();
grep.native.out:bluetooth/HeadsetBase.java:        classInitNative();
grep.native.out:bluetooth/HeadsetBase.java:            cleanupNativeDataNative();
grep.native.out:bluetooth/HeadsetBase.java:    private native void cleanupNativeDataNative();
grep.native.out:bluetooth/HeadsetBase.java:        initializeNativeDataNative(-1);
grep.native.out:bluetooth/HeadsetBase.java:        initializeNativeDataNative(socketFd);
grep.native.out:bluetooth/HeadsetBase.java:    private native void initializeNativeDataNative(int socketFd);
grep.native.out:bluetooth/HeadsetBase.java:                        String input = readNative(500);
grep.native.out:bluetooth/HeadsetBase.java:                            last_read_error = getLastReadStatusNative();
grep.native.out:bluetooth/HeadsetBase.java:                                disconnectNative();
grep.native.out:bluetooth/HeadsetBase.java:    private native String readNative(int timeout_ms);
grep.native.out:bluetooth/HeadsetBase.java:    private native int getLastReadStatusNative();
grep.native.out:bluetooth/HeadsetBase.java:            if (!connectNative()) return false;
grep.native.out:bluetooth/HeadsetBase.java:    private native boolean connectNative();
grep.native.out:bluetooth/HeadsetBase.java:        int ret = connectAsyncNative();
grep.native.out:bluetooth/HeadsetBase.java:    private native int connectAsyncNative();
grep.native.out:bluetooth/HeadsetBase.java:        int res = waitForAsyncConnectNative(timeout_ms);
grep.native.out:bluetooth/HeadsetBase.java:    private native int waitForAsyncConnectNative(int timeout_ms);
grep.native.out:bluetooth/HeadsetBase.java:        disconnectNative();
grep.native.out:bluetooth/HeadsetBase.java:    private native void disconnectNative();
grep.native.out:bluetooth/HeadsetBase.java:            boolean ret = sendURCNative(urc);
grep.native.out:bluetooth/HeadsetBase.java:    private native boolean sendURCNative(String urc);
grep.native.out:bluetooth/BluetoothAudioGateway.java:    private int mNativeData;
grep.native.out:bluetooth/BluetoothAudioGateway.java:    static { classInitNative(); }
grep.native.out:bluetooth/BluetoothAudioGateway.java:    /* out - written by native code */
grep.native.out:bluetooth/BluetoothAudioGateway.java:        initializeNativeDataNative();
grep.native.out:bluetooth/BluetoothAudioGateway.java:                            if (waitForHandsfreeConnectNative(SELECT_WAIT_TIMEOUT) == false) {
grep.native.out:bluetooth/BluetoothAudioGateway.java:            if (setUpListeningSocketsNative() == false) {
grep.native.out:bluetooth/BluetoothAudioGateway.java:                tearDownListeningSocketsNative();
grep.native.out:bluetooth/BluetoothAudioGateway.java:            cleanupNativeDataNative();
grep.native.out:bluetooth/BluetoothAudioGateway.java:    private static native void classInitNative();
grep.native.out:bluetooth/BluetoothAudioGateway.java:    private native void initializeNativeDataNative();
grep.native.out:bluetooth/BluetoothAudioGateway.java:    private native void cleanupNativeDataNative();
grep.native.out:bluetooth/BluetoothAudioGateway.java:    private native boolean waitForHandsfreeConnectNative(int timeoutMs);
grep.native.out:bluetooth/BluetoothAudioGateway.java:    private native boolean setUpListeningSocketsNative();
grep.native.out:bluetooth/BluetoothAudioGateway.java:    private native void tearDownListeningSocketsNative();
grep.native.out:bluetooth/BluetoothAdapter.java:            socket.mSocket.throwErrnoNative(errno);
grep.native.out:bluetooth/BluetoothAdapter.java:                socket.mSocket.throwErrnoNative(errno);  // Exception as a result of bindListen()
grep.native.out:bluetooth/BluetoothAdapter.java:            socket.mSocket.throwErrnoNative(errno);
grep.native.out:bluetooth/BluetoothAdapter.java:            socket.mSocket.throwErrnoNative(errno);
grep.native.out:content/Intent.java: *         {@link #CATEGORY_ALTERNATIVE} means it should be included in a list
grep.native.out:content/Intent.java: *         of alternative actions the user can perform on a piece of data.</p>
grep.native.out:content/Intent.java: *         {@link #CATEGORY_ALTERNATIVE}, then you will only resolve to components
grep.native.out:content/Intent.java: *                 &lt;category android:name="android.intent.category.ALTERNATIVE" /&gt;
grep.native.out:content/Intent.java: *                 &lt;category android:name="android.intent.category.SELECTED_ALTERNATIVE" /&gt;
grep.native.out:content/Intent.java: * the Intent), but here we show a way you can publish alternative
grep.native.out:content/Intent.java: *     &lt;category android:name="{@link #CATEGORY_ALTERNATIVE android.intent.category.ALTERNATIVE}" /&gt;
grep.native.out:content/Intent.java: *     &lt;category android:name="{@link #CATEGORY_SELECTED_ALTERNATIVE android.intent.category.SELECTED_ALTERNATIVE}" /&gt;
grep.native.out:content/Intent.java: * also supports two other standard categories: ALTERNATIVE and
grep.native.out:content/Intent.java: * SELECTED_ALTERNATIVE.  Implementing
grep.native.out:content/Intent.java: * what the user sees when presented with this activity as an alternative
grep.native.out:content/Intent.java: *     <li> {@link #CATEGORY_ALTERNATIVE}
grep.native.out:content/Intent.java: *     <li> {@link #CATEGORY_SELECTED_ALTERNATIVE}
grep.native.out:content/Intent.java:     * what they want to before proceeding.  This can be used as an alternative
grep.native.out:content/Intent.java:     * Set if the activity should be considered as an alternative action to
grep.native.out:content/Intent.java:     * {@link #CATEGORY_SELECTED_ALTERNATIVE} for an alternative action that
grep.native.out:content/Intent.java:     * displayed in the set of alternative things the user can do, usually as
grep.native.out:content/Intent.java:     * alternative of any particular action will be shown to the user, so using
grep.native.out:content/Intent.java:     * a specific action like this makes sure that your alternative will be
grep.native.out:content/Intent.java:    public static final String CATEGORY_ALTERNATIVE = "android.intent.category.ALTERNATIVE";
grep.native.out:content/Intent.java:     * Set if the activity should be considered as an alternative selection
grep.native.out:content/Intent.java:     * {@link #CATEGORY_ALTERNATIVE}, but is used in activities showing a list
grep.native.out:content/Intent.java:     * of items from which the user can select, giving them alternatives to the
grep.native.out:content/Intent.java:    public static final String CATEGORY_SELECTED_ALTERNATIVE = "android.intent.category.SELECTED_ALTERNATIVE";
grep.native.out:content/ContentProvider.java:    class Transport extends ContentProviderNative {
grep.native.out:content/res/XmlBlock.java:        mNative = nativeCreate(data, 0, data.length);
grep.native.out:content/res/XmlBlock.java:        mStrings = new StringBlock(nativeGetStringBlock(mNative), false);
grep.native.out:content/res/XmlBlock.java:        mNative = nativeCreate(data, offset, size);
grep.native.out:content/res/XmlBlock.java:        mStrings = new StringBlock(nativeGetStringBlock(mNative), false);
grep.native.out:content/res/XmlBlock.java:            nativeDestroy(mNative);
grep.native.out:content/res/XmlBlock.java:            if (mNative != 0) {
grep.native.out:content/res/XmlBlock.java:                return new Parser(nativeCreateParseState(mNative), this);
grep.native.out:content/res/XmlBlock.java:            int id = nativeGetText(mParseState);
grep.native.out:content/res/XmlBlock.java:            return nativeGetLineNumber(mParseState);
grep.native.out:content/res/XmlBlock.java:            int id = nativeGetNamespace(mParseState);
grep.native.out:content/res/XmlBlock.java:            int id = nativeGetName(mParseState);
grep.native.out:content/res/XmlBlock.java:            int id = nativeGetAttributeNamespace(mParseState, index);
grep.native.out:content/res/XmlBlock.java:            int id = nativeGetAttributeName(mParseState, index);
grep.native.out:content/res/XmlBlock.java:            return mEventType == START_TAG ? nativeGetAttributeCount(mParseState) : -1;
grep.native.out:content/res/XmlBlock.java:            int id = nativeGetAttributeStringValue(mParseState, index);
grep.native.out:content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, index);
grep.native.out:content/res/XmlBlock.java:            int v = nativeGetAttributeData(mParseState, index);
grep.native.out:content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, name);
grep.native.out:content/res/XmlBlock.java:            int ev = nativeNext(mParseState);
grep.native.out:content/res/XmlBlock.java:            return nativeGetAttributeResource(mParseState, index);
grep.native.out:content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
grep.native.out:content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
grep.native.out:content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
grep.native.out:content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
grep.native.out:content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
grep.native.out:content/res/XmlBlock.java:            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
grep.native.out:content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:            int v = nativeGetAttributeData(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:                return nativeGetAttributeData(mParseState, idx) != 0;
grep.native.out:content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:                return nativeGetAttributeData(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:                return nativeGetAttributeData(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:                return nativeGetAttributeData(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:            int t = nativeGetAttributeDataType(mParseState, idx);
grep.native.out:content/res/XmlBlock.java:                    nativeGetAttributeData(mParseState, idx));
grep.native.out:content/res/XmlBlock.java:            int id = nativeGetIdAttribute(mParseState);
grep.native.out:content/res/XmlBlock.java:            int id = nativeGetClassAttribute(mParseState);
grep.native.out:content/res/XmlBlock.java:            //todo: create and use native method
grep.native.out:content/res/XmlBlock.java:            return nativeGetStyleAttribute(mParseState);
grep.native.out:content/res/XmlBlock.java:                    nativeDestroyParseState(mParseState);
grep.native.out:content/res/XmlBlock.java:     * Create from an existing xml block native object.  This is
grep.native.out:content/res/XmlBlock.java:     *  are doing!  The given native object must exist for the entire lifetime
grep.native.out:content/res/XmlBlock.java:        mNative = xmlBlock;
grep.native.out:content/res/XmlBlock.java:        mStrings = new StringBlock(nativeGetStringBlock(xmlBlock), false);
grep.native.out:content/res/XmlBlock.java:    private final int mNative;
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeCreate(byte[] data,
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetStringBlock(int obj);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeCreateParseState(int obj);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeNext(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetNamespace(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetName(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetText(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetLineNumber(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetAttributeCount(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetAttributeNamespace(int state, int idx);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetAttributeName(int state, int idx);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetAttributeResource(int state, int idx);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetAttributeDataType(int state, int idx);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetAttributeData(int state, int idx);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetAttributeStringValue(int state, int idx);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetIdAttribute(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetClassAttribute(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetStyleAttribute(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native int nativeGetAttributeIndex(int state, String namespace, String name);
grep.native.out:content/res/XmlBlock.java:    private static final native void nativeDestroyParseState(int state);
grep.native.out:content/res/XmlBlock.java:    private static final native void nativeDestroy(int obj);
grep.native.out:content/res/AssetManager.java:    // For communication with native code.
grep.native.out:content/res/AssetManager.java:                mStringBlocks[i] = new StringBlock(getNativeStringBlock(i), true);
grep.native.out:content/res/AssetManager.java:    public native final String[] list(String path)
grep.native.out:content/res/AssetManager.java:            int asset = openNonAssetNative(cookie, fileName, accessMode);
grep.native.out:content/res/AssetManager.java:            ParcelFileDescriptor pfd = openNonAssetFdNative(cookie,
grep.native.out:content/res/AssetManager.java:            int xmlBlock = openXmlAssetNative(cookie, fileName);
grep.native.out:content/res/AssetManager.java:    public native final int addAssetPath(String path);
grep.native.out:content/res/AssetManager.java:    public native final boolean isUpToDate();
grep.native.out:content/res/AssetManager.java:    public native final void setLocale(String locale);
grep.native.out:content/res/AssetManager.java:    public native final String[] getLocales();
grep.native.out:content/res/AssetManager.java:    public native final void setConfiguration(int mcc, int mnc, String locale,
grep.native.out:content/res/AssetManager.java:    /*package*/ native final int getResourceIdentifier(String type,
grep.native.out:content/res/AssetManager.java:    /*package*/ native final String getResourceName(int resid);
grep.native.out:content/res/AssetManager.java:    /*package*/ native final String getResourcePackageName(int resid);
grep.native.out:content/res/AssetManager.java:    /*package*/ native final String getResourceTypeName(int resid);
grep.native.out:content/res/AssetManager.java:    /*package*/ native final String getResourceEntryName(int resid);
grep.native.out:content/res/AssetManager.java:    private native final int openAsset(String fileName, int accessMode);
grep.native.out:content/res/AssetManager.java:    private final native ParcelFileDescriptor openAssetFd(String fileName,
grep.native.out:content/res/AssetManager.java:    private native final int openNonAssetNative(int cookie, String fileName,
grep.native.out:content/res/AssetManager.java:    private native ParcelFileDescriptor openNonAssetFdNative(int cookie,
grep.native.out:content/res/AssetManager.java:    private native final void destroyAsset(int asset);
grep.native.out:content/res/AssetManager.java:    private native final int readAssetChar(int asset);
grep.native.out:content/res/AssetManager.java:    private native final int readAsset(int asset, byte[] b, int off, int len);
grep.native.out:content/res/AssetManager.java:    private native final long seekAsset(int asset, long offset, int whence);
grep.native.out:content/res/AssetManager.java:    private native final long getAssetLength(int asset);
grep.native.out:content/res/AssetManager.java:    private native final long getAssetRemainingLength(int asset);
grep.native.out:content/res/AssetManager.java:    private native final int loadResourceValue(int ident, TypedValue outValue,
grep.native.out:content/res/AssetManager.java:    private native final int loadResourceBagValue(int ident, int bagEntryId, TypedValue outValue,
grep.native.out:content/res/AssetManager.java:    /*package*/ native static final boolean applyStyle(int theme,
grep.native.out:content/res/AssetManager.java:    /*package*/ native final boolean retrieveAttributes(
grep.native.out:content/res/AssetManager.java:    /*package*/ native final int getArraySize(int resource);
grep.native.out:content/res/AssetManager.java:    /*package*/ native final int retrieveArray(int resource, int[] outValues);
grep.native.out:content/res/AssetManager.java:    private native final int getStringBlockCount();
grep.native.out:content/res/AssetManager.java:    private native final int getNativeStringBlock(int block);
grep.native.out:content/res/AssetManager.java:    public native final String getCookieName(int cookie);
grep.native.out:content/res/AssetManager.java:    public native static final int getGlobalAssetCount();
grep.native.out:content/res/AssetManager.java:    public native static final String getAssetAllocations();
grep.native.out:content/res/AssetManager.java:    public native static final int getGlobalAssetManagerCount();
grep.native.out:content/res/AssetManager.java:    private native final int newTheme();
grep.native.out:content/res/AssetManager.java:    private native final void deleteTheme(int theme);
grep.native.out:content/res/AssetManager.java:    /*package*/ native static final void applyThemeStyle(int theme, int styleRes, boolean force);
grep.native.out:content/res/AssetManager.java:    /*package*/ native static final void copyTheme(int dest, int source);
grep.native.out:content/res/AssetManager.java:    /*package*/ native static final int loadThemeAttributeValue(int theme, int ident,
grep.native.out:content/res/AssetManager.java:    /*package*/ native static final void dumpTheme(int theme, int priority, String tag, String prefix);
grep.native.out:content/res/AssetManager.java:    private native final int openXmlAssetNative(int cookie, String fileName);
grep.native.out:content/res/AssetManager.java:    private native final String[] getArrayStringResource(int arrayRes);
grep.native.out:content/res/AssetManager.java:    private native final int[] getArrayStringInfo(int arrayRes);
grep.native.out:content/res/AssetManager.java:    /*package*/ native final int[] getArrayIntResource(int arrayRes);
grep.native.out:content/res/AssetManager.java:    private native final void init();
grep.native.out:content/res/AssetManager.java:    private native final void destroy();
grep.native.out:content/res/StringBlock.java:    private final int mNative;
grep.native.out:content/res/StringBlock.java:    private final boolean mOwnsNative;
grep.native.out:content/res/StringBlock.java:        mNative = nativeCreate(data, 0, data.length);
grep.native.out:content/res/StringBlock.java:        mOwnsNative = true;
grep.native.out:content/res/StringBlock.java:                + ": " + nativeGetSize(mNative));
grep.native.out:content/res/StringBlock.java:        mNative = nativeCreate(data, offset, size);
grep.native.out:content/res/StringBlock.java:        mOwnsNative = true;
grep.native.out:content/res/StringBlock.java:                + ": " + nativeGetSize(mNative));
grep.native.out:content/res/StringBlock.java:                final int num = nativeGetSize(mNative);
grep.native.out:content/res/StringBlock.java:            String str = nativeGetString(mNative, idx);
grep.native.out:content/res/StringBlock.java:            int[] style = nativeGetStyle(mNative, idx);
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.boldId = nativeIndexOfString(mNative, "b");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.italicId = nativeIndexOfString(mNative, "i");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.underlineId = nativeIndexOfString(mNative, "u");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.ttId = nativeIndexOfString(mNative, "tt");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.bigId = nativeIndexOfString(mNative, "big");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.smallId = nativeIndexOfString(mNative, "small");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.supId = nativeIndexOfString(mNative, "sup");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.subId = nativeIndexOfString(mNative, "sub");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.strikeId = nativeIndexOfString(mNative, "strike");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.listItemId = nativeIndexOfString(mNative, "li");
grep.native.out:content/res/StringBlock.java:                    mStyleIDs.marqueeId = nativeIndexOfString(mNative, "marquee");
grep.native.out:content/res/StringBlock.java:        if (mOwnsNative) {
grep.native.out:content/res/StringBlock.java:            nativeDestroy(mNative);
grep.native.out:content/res/StringBlock.java:                String tag = nativeGetString(mNative, type);
grep.native.out:content/res/StringBlock.java:     * Create from an existing string block native object.  This is
grep.native.out:content/res/StringBlock.java:     *  are doing!  The given native object must exist for the entire lifetime
grep.native.out:content/res/StringBlock.java:        mNative = obj;
grep.native.out:content/res/StringBlock.java:        mOwnsNative = false;
grep.native.out:content/res/StringBlock.java:                + ": " + nativeGetSize(mNative));
grep.native.out:content/res/StringBlock.java:    private static final native int nativeCreate(byte[] data,
grep.native.out:content/res/StringBlock.java:    private static final native int nativeGetSize(int obj);
grep.native.out:content/res/StringBlock.java:    private static final native String nativeGetString(int obj, int idx);
grep.native.out:content/res/StringBlock.java:    private static final native int[] nativeGetStyle(int obj, int idx);
grep.native.out:content/res/StringBlock.java:    private static final native int nativeIndexOfString(int obj, String str);
grep.native.out:content/res/StringBlock.java:    private static final native void nativeDestroy(int obj);
grep.native.out:content/BroadcastReceiver.java:import android.app.ActivityManagerNative;
grep.native.out:content/BroadcastReceiver.java:        IActivityManager am = ActivityManagerNative.getDefault();
grep.native.out:content/pm/PackageManager.java:     * the package being installed contains native code, but none that is
grep.native.out:content/ContentProviderNative.java:import android.database.BulkCursorNative;
grep.native.out:content/ContentProviderNative.java:abstract public class ContentProviderNative extends Binder implements IContentProvider {
grep.native.out:content/ContentProviderNative.java:    public ContentProviderNative()
grep.native.out:content/ContentProviderNative.java:            bulkCursor = BulkCursorNative.asInterface(bulkCursorBinder);
grep.native.out:database/BulkCursorNative.java: * Native implementation of the bulk cursor. This is only for use in implementing
grep.native.out:database/BulkCursorNative.java:public abstract class BulkCursorNative extends Binder implements IBulkCursor
grep.native.out:database/BulkCursorNative.java:    public BulkCursorNative()
grep.native.out:database/CursorToBulkCursorAdaptor.java:public final class CursorToBulkCursorAdaptor extends BulkCursorNative 
grep.native.out:database/Cursor.java:     * <p>If the native content of that column is not blob exception may throw
grep.native.out:database/Cursor.java:     * <p>If the native content of that column is not text the result will be
grep.native.out:database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
grep.native.out:database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
grep.native.out:database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
grep.native.out:database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
grep.native.out:database/Cursor.java:     * <p>If the native content of that column is not numeric the result will be
grep.native.out:database/sqlite/SQLiteQuery.java:                // is not safe in this situation. the native code will ignore maxRead
grep.native.out:database/sqlite/SQLiteQuery.java:                int numRows = native_fill_window(window, window.getStartPosition(), mOffsetIndex,
grep.native.out:database/sqlite/SQLiteQuery.java:            return native_column_count();
grep.native.out:database/sqlite/SQLiteQuery.java:            return native_column_name(columnIndex);
grep.native.out:database/sqlite/SQLiteQuery.java:    private final native int native_fill_window(CursorWindow window, 
grep.native.out:database/sqlite/SQLiteQuery.java:    private final native int native_column_count();
grep.native.out:database/sqlite/SQLiteQuery.java:    private final native String native_column_name(int columnIndex);
grep.native.out:database/sqlite/SQLiteDebug.java:    public static native void getPagerStats(PagerStats stats);
grep.native.out:database/sqlite/SQLiteDebug.java:    public static native long getHeapSize();
grep.native.out:database/sqlite/SQLiteDebug.java:    public static native long getHeapAllocatedSize();
grep.native.out:database/sqlite/SQLiteDebug.java:    public static native long getHeapFreeSize();
grep.native.out:database/sqlite/SQLiteDebug.java:    public static native void getHeapDirtyPages(int[] pages);
grep.native.out:database/sqlite/SQLiteStatement.java:            native_execute();
grep.native.out:database/sqlite/SQLiteStatement.java:            native_execute();
grep.native.out:database/sqlite/SQLiteStatement.java:            long retValue = native_1x1_long();
grep.native.out:database/sqlite/SQLiteStatement.java:            String retValue = native_1x1_string();
grep.native.out:database/sqlite/SQLiteStatement.java:    private final native void native_execute();
grep.native.out:database/sqlite/SQLiteStatement.java:    private final native long native_1x1_long();
grep.native.out:database/sqlite/SQLiteStatement.java:    private final native String native_1x1_string();
grep.native.out:database/sqlite/SQLiteProgram.java:     * Native linkage, do not modify. This comes from the database and should not be modified
grep.native.out:database/sqlite/SQLiteProgram.java:     * in here or in the native code.
grep.native.out:database/sqlite/SQLiteProgram.java:     * Native linkage, do not modify. When non-0 this holds a reference to a valid
grep.native.out:database/sqlite/SQLiteProgram.java:     * sqlite3_statement object. It is only updated by the native code, but may be
grep.native.out:database/sqlite/SQLiteProgram.java:     * is a valid native-side program or not.
grep.native.out:database/sqlite/SQLiteProgram.java:        this.nHandle = db.mNativeHandle;
grep.native.out:database/sqlite/SQLiteProgram.java:        // Note that native_finalize() checks to make sure that nStatement is
grep.native.out:database/sqlite/SQLiteProgram.java:        native_finalize();
grep.native.out:database/sqlite/SQLiteProgram.java:        // Note that native_finalize() checks to make sure that nStatement is
grep.native.out:database/sqlite/SQLiteProgram.java:        native_finalize();
grep.native.out:database/sqlite/SQLiteProgram.java:                // Note that the native_compile() takes care of destroying any previously
grep.native.out:database/sqlite/SQLiteProgram.java:                native_compile(sql);
grep.native.out:database/sqlite/SQLiteProgram.java:            native_bind_null(index);
grep.native.out:database/sqlite/SQLiteProgram.java:            native_bind_long(index, value);
grep.native.out:database/sqlite/SQLiteProgram.java:            native_bind_double(index, value);
grep.native.out:database/sqlite/SQLiteProgram.java:            native_bind_string(index, value);
grep.native.out:database/sqlite/SQLiteProgram.java:            native_bind_blob(index, value);
grep.native.out:database/sqlite/SQLiteProgram.java:            native_clear_bindings();
grep.native.out:database/sqlite/SQLiteProgram.java:     * Make sure that the native resource is cleaned up.
grep.native.out:database/sqlite/SQLiteProgram.java:    protected final native void native_compile(String sql);
grep.native.out:database/sqlite/SQLiteProgram.java:    protected final native void native_finalize();
grep.native.out:database/sqlite/SQLiteProgram.java:    protected final native void native_bind_null(int index);
grep.native.out:database/sqlite/SQLiteProgram.java:    protected final native void native_bind_long(int index, long value);
grep.native.out:database/sqlite/SQLiteProgram.java:    protected final native void native_bind_double(int index, double value);
grep.native.out:database/sqlite/SQLiteProgram.java:    protected final native void native_bind_string(int index, String value);
grep.native.out:database/sqlite/SQLiteProgram.java:    protected final native void native_bind_blob(int index, byte[] value);
grep.native.out:database/sqlite/SQLiteProgram.java:    private final native void native_clear_bindings();
grep.native.out:database/sqlite/SQLiteDatabase.java:    public static final int OPEN_READWRITE = 0x00000000;          // update native code if changing
grep.native.out:database/sqlite/SQLiteDatabase.java:    public static final int OPEN_READONLY = 0x00000001;           // update native code if changing
grep.native.out:database/sqlite/SQLiteDatabase.java:    private static final int OPEN_READ_MASK = 0x00000001;         // update native code if changing
grep.native.out:database/sqlite/SQLiteDatabase.java:    public static final int NO_LOCALIZED_COLLATORS = 0x00000010;  // update native code if changing
grep.native.out:database/sqlite/SQLiteDatabase.java:    public static final int CREATE_IF_NECESSARY = 0x10000000;     // update native code if changing
grep.native.out:database/sqlite/SQLiteDatabase.java:    /** Used by native code, do not rename */
grep.native.out:database/sqlite/SQLiteDatabase.java:    /* package */ int mNativeHandle = 0;
grep.native.out:database/sqlite/SQLiteDatabase.java:    static public native int releaseMemory();
grep.native.out:database/sqlite/SQLiteDatabase.java:     * touch the native sqlite3* object since it is single threaded and uses
grep.native.out:database/sqlite/SQLiteDatabase.java:     * touch the native sqlite3* object since it is single threaded and uses
grep.native.out:database/sqlite/SQLiteDatabase.java:     * Native call to close the database.
grep.native.out:database/sqlite/SQLiteDatabase.java:    private native void dbclose();
grep.native.out:database/sqlite/SQLiteDatabase.java:            native_execSQL("SELECT _sync_dirty FROM " + updateTable
grep.native.out:database/sqlite/SQLiteDatabase.java:            native_execSQL("SELECT " + foreignKey + " FROM " + table
grep.native.out:database/sqlite/SQLiteDatabase.java:            native_execSQL(sql);
grep.native.out:database/sqlite/SQLiteDatabase.java:        return mNativeHandle != 0;
grep.native.out:database/sqlite/SQLiteDatabase.java:            native_setLocale(locale.toString(), mFlags);
grep.native.out:database/sqlite/SQLiteDatabase.java:     * Native call to open the database.
grep.native.out:database/sqlite/SQLiteDatabase.java:    private native void dbopen(String path, int flags);
grep.native.out:database/sqlite/SQLiteDatabase.java:     * Native call to execute a raw SQL statement. {@link #lock} must be held
grep.native.out:database/sqlite/SQLiteDatabase.java:    /* package */ native void native_execSQL(String sql) throws SQLException;
grep.native.out:database/sqlite/SQLiteDatabase.java:     * Native call to set the locale.  {@link #lock} must be held when calling
grep.native.out:database/sqlite/SQLiteDatabase.java:    /* package */ native void native_setLocale(String loc, int flags);
grep.native.out:database/sqlite/SQLiteDatabase.java:    /* package */ native long lastInsertRow();
grep.native.out:database/sqlite/SQLiteDatabase.java:    /* package */ native int lastChangeCount();
grep.native.out:database/sqlite/SQLiteCursor.java:     * Release the native resources, if they haven't been released yet.
grep.native.out:database/sqlite/SQLiteContentHelper.java:    // TODO: make this native and use the SQLite blob API to reduce copying
grep.native.out:database/CursorWindow.java:    /** The pointer to the native window class */
grep.native.out:database/CursorWindow.java:        native_init(localWindow);
grep.native.out:database/CursorWindow.java:            return getNumRows_native();
grep.native.out:database/CursorWindow.java:    private native int getNumRows_native();
grep.native.out:database/CursorWindow.java:            return setNumColumns_native(columnNum);
grep.native.out:database/CursorWindow.java:    private native boolean setNumColumns_native(int columnNum);
grep.native.out:database/CursorWindow.java:            return allocRow_native();
grep.native.out:database/CursorWindow.java:    private native boolean allocRow_native();    
grep.native.out:database/CursorWindow.java:            freeLastRow_native();
grep.native.out:database/CursorWindow.java:    private native void freeLastRow_native();
grep.native.out:database/CursorWindow.java:            return putBlob_native(value, row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native boolean putBlob_native(byte[] value, int row, int col);    
grep.native.out:database/CursorWindow.java:            return putString_native(value, row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native boolean putString_native(String value, int row, int col);    
grep.native.out:database/CursorWindow.java:            return putLong_native(value, row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native boolean putLong_native(long value, int row, int col);
grep.native.out:database/CursorWindow.java:            return putDouble_native(value, row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native boolean putDouble_native(double value, int row, int col);    
grep.native.out:database/CursorWindow.java:            return putNull_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native boolean putNull_native(int row, int col);
grep.native.out:database/CursorWindow.java:            return isNull_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native boolean isNull_native(int row, int col);
grep.native.out:database/CursorWindow.java:            return getBlob_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native byte[] getBlob_native(int row, int col);
grep.native.out:database/CursorWindow.java:            return isBlob_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:            return isInteger_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:            return isFloat_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:            return isString_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native boolean isBlob_native(int row, int col);
grep.native.out:database/CursorWindow.java:    private native boolean isString_native(int row, int col);
grep.native.out:database/CursorWindow.java:    private native boolean isInteger_native(int row, int col);
grep.native.out:database/CursorWindow.java:    private native boolean isFloat_native(int row, int col);
grep.native.out:database/CursorWindow.java:            return getString_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native String getString_native(int row, int col);
grep.native.out:database/CursorWindow.java:            char[] newbuf = copyStringToBuffer_native(
grep.native.out:database/CursorWindow.java:    private native char[] copyStringToBuffer_native(
grep.native.out:database/CursorWindow.java:            return getLong_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native long getLong_native(int row, int col);
grep.native.out:database/CursorWindow.java:            return getDouble_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:    private native double getDouble_native(int row, int col);
grep.native.out:database/CursorWindow.java:            return (short) getLong_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:            return (int) getLong_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:            return (float) getDouble_native(row - mStartPos, col);
grep.native.out:database/CursorWindow.java:            native_clear();
grep.native.out:database/CursorWindow.java:    /** Clears out the native side of things */
grep.native.out:database/CursorWindow.java:    private native void native_clear();
grep.native.out:database/CursorWindow.java:     * Cleans up the native resources associated with the window.
grep.native.out:database/CursorWindow.java:    private native void close_native();
grep.native.out:database/CursorWindow.java:        close_native();
grep.native.out:database/CursorWindow.java:        dest.writeStrongBinder(native_getBinder());
grep.native.out:database/CursorWindow.java:        IBinder nativeBinder = source.readStrongBinder();
grep.native.out:database/CursorWindow.java:        native_init(nativeBinder);
grep.native.out:database/CursorWindow.java:    /** Get the binder for the native side of the window */
grep.native.out:database/CursorWindow.java:    private native IBinder native_getBinder();
grep.native.out:database/CursorWindow.java:    /** Does the native side initialization for an empty window */
grep.native.out:database/CursorWindow.java:    private native void native_init(boolean localOnly);
grep.native.out:database/CursorWindow.java:    /** Does the native side initialization with an existing binder from another process */
grep.native.out:database/CursorWindow.java:    private native void native_init(IBinder nativeBinder);
grep.native.out:database/CursorWindow.java:        close_native();        
grep.native.out:ddm/DdmHandleHeap.java: * Handle native and virtual heap requests.
grep.native.out:ddm/DdmHandleHeap.java:     * Handle a "HeaP SeGment" or "Native Heap SeGment" request.
grep.native.out:ddm/DdmHandleHeap.java:    private Chunk handleHPSGNHSG(Chunk request, boolean isNative) {
grep.native.out:ddm/DdmHandleHeap.java:                + ", what=" + what + ", isNative=" + isNative);
grep.native.out:ddm/DdmHandleHeap.java:        boolean ok = DdmVmInternal.heapSegmentNotify(when, what, isNative);
grep.native.out:ddm/DdmHandleNativeHeap.java:public class DdmHandleNativeHeap extends ChunkHandler {
grep.native.out:ddm/DdmHandleNativeHeap.java:    private static DdmHandleNativeHeap mInstance = new DdmHandleNativeHeap();
grep.native.out:ddm/DdmHandleNativeHeap.java:    private DdmHandleNativeHeap() {}
grep.native.out:ddm/DdmHandleNativeHeap.java:        Log.i("ddm-nativeheap", "Handling " + name(request.type) + " chunk");
grep.native.out:ddm/DdmHandleNativeHeap.java:     * Handle a "Native Heap GeT" request.
grep.native.out:ddm/DdmHandleNativeHeap.java:            Log.i("ddm-nativeheap", "Sending " + data.length + " bytes");
grep.native.out:ddm/DdmHandleNativeHeap.java:    private native byte[] getLeakInfo();
grep.native.out:ddm/DdmRegister.java:     * way so that the handlers can use Android classes with native calls
grep.native.out:ddm/DdmRegister.java:        DdmHandleNativeHeap.register();
grep.native.out:debug/JNITest.java:    private native int part1(int intArg, double doubleArg, String stringArg,
grep.native.out:debug/JNITest.java:    private static native int part3(String stringArg);
grep.native.out:emoji/EmojiFactory.java:    // A pointer to native EmojiFactory object.
grep.native.out:emoji/EmojiFactory.java:    private int mNativeEmojiFactory;
grep.native.out:emoji/EmojiFactory.java:     * Private constructor that must received an already allocated native
grep.native.out:emoji/EmojiFactory.java:    private EmojiFactory(int nativeEmojiFactory, String name) {
grep.native.out:emoji/EmojiFactory.java:        mNativeEmojiFactory = nativeEmojiFactory;
grep.native.out:emoji/EmojiFactory.java:            nativeDestructor(mNativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:            Bitmap ret = nativeGetBitmapFromAndroidPua(mNativeEmojiFactory, pua);
grep.native.out:emoji/EmojiFactory.java:                Bitmap ret = nativeGetBitmapFromAndroidPua(mNativeEmojiFactory, pua);
grep.native.out:emoji/EmojiFactory.java:        return nativeGetAndroidPuaFromVendorSpecificSjis(mNativeEmojiFactory, sjis);
grep.native.out:emoji/EmojiFactory.java:        return nativeGetVendorSpecificSjisFromAndroidPua(mNativeEmojiFactory, pua);
grep.native.out:emoji/EmojiFactory.java:        return nativeGetAndroidPuaFromVendorSpecificPua(mNativeEmojiFactory, vsp);
grep.native.out:emoji/EmojiFactory.java:        int minVsp = nativeGetMinimumVendorSpecificPua(mNativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:        int maxVsp = nativeGetMaximumVendorSpecificPua(mNativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:        return nativeGetVendorSpecificPuaFromAndroidPua(mNativeEmojiFactory, pua);
grep.native.out:emoji/EmojiFactory.java:        int minVsp = nativeGetMinimumAndroidPua(mNativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:        int maxVsp = nativeGetMaximumAndroidPua(mNativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:    public static native EmojiFactory newInstance(String class_name);
grep.native.out:emoji/EmojiFactory.java:    public static native EmojiFactory newAvailableInstance();
grep.native.out:emoji/EmojiFactory.java:        return nativeGetMinimumAndroidPua(mNativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:        return nativeGetMaximumAndroidPua(mNativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:    // native methods
grep.native.out:emoji/EmojiFactory.java:    private native void nativeDestructor(int factory);
grep.native.out:emoji/EmojiFactory.java:    private native Bitmap nativeGetBitmapFromAndroidPua(int nativeEmojiFactory, int AndroidPua);
grep.native.out:emoji/EmojiFactory.java:    private native int nativeGetAndroidPuaFromVendorSpecificSjis(int nativeEmojiFactory,
grep.native.out:emoji/EmojiFactory.java:    private native int nativeGetVendorSpecificSjisFromAndroidPua(int nativeEmojiFactory,
grep.native.out:emoji/EmojiFactory.java:    private native int nativeGetAndroidPuaFromVendorSpecificPua(int nativeEmojiFactory,
grep.native.out:emoji/EmojiFactory.java:    private native int nativeGetVendorSpecificPuaFromAndroidPua(int nativeEmojiFactory,
grep.native.out:emoji/EmojiFactory.java:    private native int nativeGetMaximumVendorSpecificPua(int nativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:    private native int nativeGetMinimumVendorSpecificPua(int nativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:    private native int nativeGetMaximumAndroidPua(int nativeEmojiFactory);
grep.native.out:emoji/EmojiFactory.java:    private native int nativeGetMinimumAndroidPua(int nativeEmojiFactory);
grep.native.out:grep.native.out:app/ApplicationThreadNative.java:public abstract class ApplicationThreadNative extends Binder
grep.native.out:grep.native.out:app/ApplicationThreadNative.java:    public ApplicationThreadNative() {
grep.native.out:grep.native.out:app/SearchManager.java: *                         above the search box. As an alternative, you may
grep.native.out:grep.native.out:app/IActivityManager.java:import android.content.ContentProviderNative;
grep.native.out:grep.native.out:app/IActivityManager.java:            provider = ContentProviderNative.asInterface(
grep.native.out:grep.native.out:app/IActivityManager.java:    // Remaining non-native transaction codes.
grep.native.out:grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getRecentTasks(maxNum,
grep.native.out:grep.native.out:app/ActivityManager.java:            return (List<RunningTaskInfo>)ActivityManagerNative.getDefault()
grep.native.out:grep.native.out:app/ActivityManager.java:            return (List<RunningServiceInfo>)ActivityManagerNative.getDefault()
grep.native.out:grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault()
grep.native.out:grep.native.out:app/ActivityManager.java:            ActivityManagerNative.getDefault().getMemoryInfo(outInfo);
grep.native.out:grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().clearApplicationUserData(packageName, 
grep.native.out:grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getProcessesInErrorState();
grep.native.out:grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getRunningAppProcesses();
grep.native.out:grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getProcessMemoryInfo(pids);
grep.native.out:grep.native.out:app/ActivityManager.java:            ActivityManagerNative.getDefault().restartPackage(packageName);
grep.native.out:grep.native.out:app/ActivityManager.java:            return ActivityManagerNative.getDefault().getDeviceConfigurationInfo();
grep.native.out:grep.native.out:app/SearchDialog.java:            int result = ActivityManagerNative.getDefault().startActivityInPackage(
grep.native.out:grep.native.out:app/Activity.java:                ActivityManagerNative.getDefault()
grep.native.out:grep.native.out:app/Activity.java:            int result = ActivityManagerNative.getDefault()
grep.native.out:grep.native.out:app/Activity.java:                result = ActivityManagerNative.getDefault()
grep.native.out:grep.native.out:app/Activity.java:                return ActivityManagerNative.getDefault()
grep.native.out:grep.native.out:app/Activity.java:            ActivityManagerNative.getDefault().overridePendingTransition(
grep.native.out:grep.native.out:app/Activity.java:            return ActivityManagerNative.getDefault().getCallingPackage(mToken);
grep.native.out:grep.native.out:app/Activity.java:            return ActivityManagerNative.getDefault().getCallingActivity
hardware/Camera.java:    private int mNativeContext; // accessed by native methods
hardware/Camera.java:        native_setup(new WeakReference<Camera>(this));
hardware/Camera.java:        native_release();
hardware/Camera.java:    private native final void native_setup(Object camera_this);
hardware/Camera.java:    private native final void native_release();
hardware/Camera.java:        native_release();
hardware/Camera.java:    public native final void reconnect() throws IOException;
hardware/Camera.java:    public native final void lock();
hardware/Camera.java:    public native final void unlock();
hardware/Camera.java:    private native final void setPreviewDisplay(Surface surface);
hardware/Camera.java:    public native final void startPreview();
hardware/Camera.java:    public native final void stopPreview();
hardware/Camera.java:    public native final boolean previewEnabled();
hardware/Camera.java:    private native final void setHasPreviewCallback(boolean installed, boolean manualBuffer);
hardware/Camera.java:     * Alternatively, a buffer from a previous callback may be passed in or used
hardware/Camera.java:    public native final void addCallbackBuffer(byte[] callbackBuffer);
hardware/Camera.java:    private static void postEventFromNative(Object camera_ref,
hardware/Camera.java:        native_autoFocus();
hardware/Camera.java:    private native final void native_autoFocus();
hardware/Camera.java:        native_cancelAutoFocus();
hardware/Camera.java:    private native final void native_cancelAutoFocus();
hardware/Camera.java:    private native final void native_takePicture();
hardware/Camera.java:        native_takePicture();
hardware/Camera.java:    public native final void startSmoothZoom(int value);
hardware/Camera.java:    public native final void stopSmoothZoom();
hardware/Camera.java:    private native final void native_setParameters(String params);
hardware/Camera.java:    private native final String native_getParameters();
hardware/Camera.java:        native_setParameters(params.flatten());
hardware/Camera.java:        String s = native_getParameters();
hardware/Sensor.java:    /* Some of these fields are set only by the native bindings in 
hardware/SensorManager.java:                nativeClassInit();
hardware/SensorManager.java:        // TODO: move this to native code for efficiency
hardware/SensorManager.java:    private static native void nativeClassInit();
hardware/SensorManager.java:    private static native int sensors_module_init();
hardware/SensorManager.java:    private static native int sensors_module_get_next_sensor(Sensor sensor, int next);
hardware/SensorManager.java:    static native int sensors_data_init();
hardware/SensorManager.java:    static native int sensors_data_uninit();
hardware/SensorManager.java:    static native int sensors_data_open(FileDescriptor[] fds, int[] ints);
hardware/SensorManager.java:    static native int sensors_data_close();
hardware/SensorManager.java:    static native int sensors_data_poll(float[] values, int[] status, long[] timestamp);
inputmethodservice/KeyboardView.java:         * @param keyCodes the codes for all the possible alternative keys
inputmethodservice/KeyboardView.java:         * a single character such as an alphabet or number or symbol, the alternatives
net/http/DomainNameChecker.java:            Collection subjectAltNames = certificate.getSubjectAlternativeNames();
net/http/DomainNameChecker.java:                                        HttpLog.v("alternative IP: " + altName);
net/http/DomainNameChecker.java:            Collection subjectAltNames = certificate.getSubjectAlternativeNames();
net/http/DomainNameChecker.java:            // one way we can get here is if an alternative name starts with
net/http/DomainNameChecker.java:            // to check the common name (ie, ignore alternative names)
net/LocalSocketAddress.java:         * @return int constant shared with native code
net/NetworkUtils.java: * Native methods for managing network interfaces.
net/NetworkUtils.java:    public native static int enableInterface(String interfaceName);
net/NetworkUtils.java:    public native static int disableInterface(String interfaceName);
net/NetworkUtils.java:    public native static int addHostRoute(String interfaceName, int hostaddr);
net/NetworkUtils.java:    public native static int setDefaultRoute(String interfaceName, int gwayAddr);
net/NetworkUtils.java:    public native static int getDefaultRoute(String interfaceName);
net/NetworkUtils.java:    public native static int removeHostRoutes(String interfaceName);
net/NetworkUtils.java:    public native static int removeDefaultRoute(String interfaceName);
net/NetworkUtils.java:    public native static int resetConnections(String interfaceName);
net/NetworkUtils.java:    public native static boolean runDhcp(String interfaceName, DhcpInfo ipInfo);
net/NetworkUtils.java:    public native static boolean stopDhcp(String interfaceName);
net/NetworkUtils.java:    public native static boolean releaseDhcpLease(String interfaceName);
net/NetworkUtils.java:    public native static String getDhcpError();
net/NetworkUtils.java:        return configureNative(interfaceName,
net/NetworkUtils.java:    private native static boolean configureNative(
net/LocalSocketImpl.java:    // These fields are accessed by native code;
net/LocalSocketImpl.java:            return available_native(fd);
net/LocalSocketImpl.java:                ret = read_native(myFd);
net/LocalSocketImpl.java:                int ret = readba_native(b, off, len, myFd);
net/LocalSocketImpl.java:                writeba_native(b, off, len, myFd);
net/LocalSocketImpl.java:                write_native(b, myFd);
net/LocalSocketImpl.java:    private native int available_native(FileDescriptor fd) throws IOException;
net/LocalSocketImpl.java:    private native void close_native(FileDescriptor fd) throws IOException;
net/LocalSocketImpl.java:    private native int read_native(FileDescriptor fd) throws IOException;
net/LocalSocketImpl.java:    private native int readba_native(byte[] b, int off, int len,
net/LocalSocketImpl.java:    private native void writeba_native(byte[] b, int off, int len,
net/LocalSocketImpl.java:    private native void write_native(int b, FileDescriptor fd)
net/LocalSocketImpl.java:    private native void connectLocal(FileDescriptor fd, String name,
net/LocalSocketImpl.java:    private native void bindLocal(FileDescriptor fd, String name, int namespace)
net/LocalSocketImpl.java:    private native FileDescriptor create_native(boolean stream)
net/LocalSocketImpl.java:    private native void listen_native(FileDescriptor fd, int backlog)
net/LocalSocketImpl.java:    private native void shutdown(FileDescriptor fd, boolean shutdownInput);
net/LocalSocketImpl.java:    private native Credentials getPeerCredentials_native(
net/LocalSocketImpl.java:    private native int getOption_native(FileDescriptor fd, int optID)
net/LocalSocketImpl.java:    private native void setOption_native(FileDescriptor fd, int optID,
net/LocalSocketImpl.java://    private native LocalSocketAddress getSockName_native
net/LocalSocketImpl.java:    private native FileDescriptor accept
net/LocalSocketImpl.java:            fd = create_native(stream);
net/LocalSocketImpl.java:            close_native(fd);
net/LocalSocketImpl.java:        listen_native(fd, backlog);
net/LocalSocketImpl.java:        int value = getOption_native(fd, optID);
net/LocalSocketImpl.java:        setOption_native(fd, optID, boolValue, intValue);
net/LocalSocketImpl.java:        return getPeerCredentials_native(fd);
net/LocalSocketImpl.java:        //return getSockName_native(fd);
os/FileObserver.java:	private native int init();
os/FileObserver.java:	private native void observe(int fd);
os/FileObserver.java:	private native int startWatching(int fd, String path, int mask);
os/FileObserver.java:	private native void stopWatching(int fd, int wfd);
os/Process.java:    public static final native long getElapsedCpuTime();
os/Process.java:    public static final native int myPid();
os/Process.java:    public static final native int myTid();
os/Process.java:    public static final native int myUid();
os/Process.java:    public static final native int getUidForName(String name);
os/Process.java:    public static final native int getGidForName(String name);
os/Process.java:    public static final native void setThreadPriority(int tid, int priority)
os/Process.java:    public static final native void setThreadGroup(int tid, int group)
os/Process.java:    public static final native void setProcessGroup(int pid, int group)
os/Process.java:    public static final native void setThreadPriority(int priority)
os/Process.java:    public static final native int getThreadPriority(int tid)
os/Process.java:    public static final native boolean supportsProcesses();
os/Process.java:    public static final native boolean setOomAdj(int pid, int amt);
os/Process.java:    public static final native void setArgV0(String text);
os/Process.java:    public static final native int setUid(int uid);
os/Process.java:    public static final native int setGid(int uid);
os/Process.java:    public static final native void sendSignal(int pid, int signal);
os/Process.java:    public static final native long getFreeMemory();
os/Process.java:    public static final native void readProcLines(String path,
os/Process.java:    public static final native int[] getPids(String path, int[] lastArray);
os/Process.java:    public static final native boolean readProcFile(String file, int[] format,
os/Process.java:    public static final native boolean parseProcLine(byte[] buffer, int startIndex, 
os/Process.java:    public static final native long getPss(int pid);
os/Debug.java:     * process. The returns info broken down by dalvik, native, and other. All results are in kB.
os/Debug.java:        /** The proportional set size for the native heap. */
os/Debug.java:        public int nativePss;
os/Debug.java:        /** The private dirty pages used by the native heap. */
os/Debug.java:        public int nativePrivateDirty;
os/Debug.java:        /** The shared dirty pages used by the native heap. */
os/Debug.java:        public int nativeSharedDirty;
os/Debug.java:            return dalvikPss + nativePss + otherPss;
os/Debug.java:            return dalvikPrivateDirty + nativePrivateDirty + otherPrivateDirty;
os/Debug.java:            return dalvikSharedDirty + nativeSharedDirty + otherSharedDirty;
os/Debug.java:            dest.writeInt(nativePss);
os/Debug.java:            dest.writeInt(nativePrivateDirty);
os/Debug.java:            dest.writeInt(nativeSharedDirty);
os/Debug.java:            nativePss = source.readInt();
os/Debug.java:            nativePrivateDirty = source.readInt();
os/Debug.java:            nativeSharedDirty = source.readInt();
os/Debug.java:    public static void startNativeTracing() {
os/Debug.java:     * Stop qemu tracing.  See {@link #startNativeTracing()} to start tracing.
os/Debug.java:    public static void stopNativeTracing() {
os/Debug.java:     * To temporarily enable tracing, use {@link #startNativeTracing()}.
os/Debug.java:     * for native methods will not change, so don't try to use this to
os/Debug.java:     * compare the performance of interpreted and native implementations of the
os/Debug.java:     * same method.  As an alternative, consider using "native" tracing
os/Debug.java:     * in the emulator via {@link #startNativeTracing()}.
os/Debug.java:     * Returns the size of the native heap.
os/Debug.java:     * @return The size of the native heap in bytes.
os/Debug.java:    public static native long getNativeHeapSize();
os/Debug.java:     * Returns the amount of allocated memory in the native heap.
os/Debug.java:    public static native long getNativeHeapAllocatedSize();
os/Debug.java:     * Returns the amount of free memory in the native heap.
os/Debug.java:    public static native long getNativeHeapFreeSize();
os/Debug.java:     * how much is in use by dalivk, the native heap, and everything else.
os/Debug.java:    public static native void getMemoryInfo(MemoryInfo memoryInfo);
os/Debug.java:    public static native void getMemoryInfo(int pid, MemoryInfo memoryInfo);
os/Debug.java:    public static native int getBinderSentTransactions();
os/Debug.java:    public static native int getBinderReceivedTransactions();
os/Debug.java:    public static final native int getBinderLocalObjectCount();
os/Debug.java:    public static final native int getBinderProxyObjectCount();
os/Debug.java:    public static final native int getBinderDeathObjectCount();
os/ServiceManagerNative.java: * Native implementation of the service manager.  Most clients will only
os/ServiceManagerNative.java:public abstract class ServiceManagerNative extends Binder implements IServiceManager
os/ServiceManagerNative.java:    public ServiceManagerNative()
os/Base64Utils.java:        return decodeBase64Native(data);
os/Base64Utils.java:    private static native byte[] decodeBase64Native(String data);
os/SystemClock.java:    native public static boolean setCurrentTimeMillis(long millis);
os/SystemClock.java:    native public static long uptimeMillis();
os/SystemClock.java:    native public static long elapsedRealtime();
os/SystemClock.java:    public static native long currentThreadTimeMillis();
os/IServiceManager.java: * BinderNative.getContextObject().  An easy way to retrieve this
os/Parcel.java:    private int mObject; // used by native code
os/Parcel.java:    private int mOwnObject; // used by native code
os/Parcel.java:    public final native int dataSize();
os/Parcel.java:    public final native int dataAvail();
os/Parcel.java:    public final native int dataPosition();
os/Parcel.java:    public final native int dataCapacity();
os/Parcel.java:    public final native void setDataSize(int size);
os/Parcel.java:    public final native void setDataPosition(int pos);
os/Parcel.java:    public final native void setDataCapacity(int size);
os/Parcel.java:    //public final native byte[] marshall();
os/Parcel.java:    private native byte[] marshallNative();
os/Parcel.java:	byte[] data = marshallNative();
os/Parcel.java:    //public final native void unmarshall(byte[] data, int offset, int length);
os/Parcel.java:    private native void unmarshallNative(byte[] data, int offset, int length);
os/Parcel.java:	unmarshallNative(data, offset, length); // may throw exception
os/Parcel.java:    public final native void appendFrom(Parcel parcel, int offset, int length);
os/Parcel.java:    public final native boolean hasFileDescriptors();
os/Parcel.java:    public final native void writeInterfaceToken(String interfaceName);
os/Parcel.java:    public final native void enforceInterface(String interfaceName);
os/Parcel.java:        writeNative(b, offset, len);
os/Parcel.java:    //private native void writeNative(byte[] b, int offset, int len);
os/Parcel.java:    private native void writeNativeNative(byte[] b, int offset, int len);
os/Parcel.java:    private void writeNative(byte[] b, int offset, int len) {
os/Parcel.java:	writeNativeNative(b, offset, len); // may throw exception
os/Parcel.java:	if (tag != 0) Log.w("ParcelJava", "writeNative() tag = " + tstr + "\n"); 
os/Parcel.java:    //public final native void writeInt(int val);
os/Parcel.java:    private native void writeIntNative(int val);
os/Parcel.java:	writeIntNative(val); // may throw exception
os/Parcel.java:    //public final native void writeLong(long val);
os/Parcel.java:    private native void writeLongNative(long val);
os/Parcel.java:	writeLongNative(val); // may throw exception
os/Parcel.java:    //public final native void writeFloat(float val);
os/Parcel.java:    private native void writeFloatNative(float val);
os/Parcel.java:	writeFloatNative(val); // may throw exception
os/Parcel.java:    //public final native void writeDouble(double val);
os/Parcel.java:    private native void writeDoubleNative(double val);
os/Parcel.java:	writeDoubleNative(val); // may throw exception
os/Parcel.java:    //public final native void writeString(String val);
os/Parcel.java:    private native void writeStringNative(String val);
os/Parcel.java:	writeStringNative(val); // may throw exception
os/Parcel.java:    public final native void writeStrongBinder(IBinder val);
os/Parcel.java:    public final native void writeFileDescriptor(FileDescriptor val);
os/Parcel.java:    //public final native int readInt();
os/Parcel.java:    private native int readIntNative();
os/Parcel.java:	int val1 = readIntNative();
os/Parcel.java:    //public final native long readLong();
os/Parcel.java:    private native long readLongNative();
os/Parcel.java:	long val1 = readLongNative();
os/Parcel.java:    //public final native float readFloat();
os/Parcel.java:    private native float readFloatNative();
os/Parcel.java:	float val1 = readFloatNative();
os/Parcel.java:    //public final native double readDouble();
os/Parcel.java:    private native double readDoubleNative();
os/Parcel.java:	double val1 = readDoubleNative();
os/Parcel.java:    //public final native String readString();
os/Parcel.java:    private native String readStringNative();
os/Parcel.java:	String val = readStringNative();
os/Parcel.java:    public final native IBinder readStrongBinder();
os/Parcel.java:    private native FileDescriptor internalReadFileDescriptor();
os/Parcel.java:    /*package*/ static native FileDescriptor openFileDescriptor(String file,
os/Parcel.java:    /*package*/ static native void closeFileDescriptor(FileDescriptor desc)
os/Parcel.java:    //public final native byte[] createByteArray();
os/Parcel.java:    private native byte[] createByteArrayNative();
os/Parcel.java:	byte[] data = createByteArrayNative();
os/Parcel.java:        // TODO: make this a native method to avoid the extra copy.
os/Parcel.java:    private native void freeBuffer();
os/Parcel.java:    private native void init(int obj);
os/Parcel.java:    private native void destroy();
os/Parcel.java:    private native void updateTaint(int tag);
os/Parcel.java:    private native int getTaint();
os/Message.java:    /** arg1 and arg2 are lower-cost alternatives to using {@link #setData(Bundle) setData()}
os/Message.java:    /** arg1 and arg2 are lower-cost alternatives to using {@link #setData(Bundle) setData()}
os/SystemProperties.java:    private static native String native_get(String key);
os/SystemProperties.java:    private static native String native_get(String key, String def);
os/SystemProperties.java:    private static native int native_get_int(String key, int def);
os/SystemProperties.java:    private static native long native_get_long(String key, long def);
os/SystemProperties.java:    private static native boolean native_get_boolean(String key, boolean def);
os/SystemProperties.java:    private static native void native_set(String key, String def);
os/SystemProperties.java:        return native_get(key);
os/SystemProperties.java:        return native_get(key, def);
os/SystemProperties.java:        return native_get_int(key, def);
os/SystemProperties.java:        return native_get_long(key, def);
os/SystemProperties.java:        return native_get_boolean(key, def);
os/SystemProperties.java:        native_set(key, val);
os/PerformanceCollector.java:     * the native heap.
os/PerformanceCollector.java:    public static final String METRIC_KEY_NATIVE_ALLOCATED = "native_allocated";
os/PerformanceCollector.java:     * native heap.
os/PerformanceCollector.java:    public static final String METRIC_KEY_NATIVE_FREE = "native_free";
os/PerformanceCollector.java:     * used by the native heap.
os/PerformanceCollector.java:    public static final String METRIC_KEY_NATIVE_PRIVATE_DIRTY = "native_private_dirty";
os/PerformanceCollector.java:     * native heap.
os/PerformanceCollector.java:    public static final String METRIC_KEY_NATIVE_PSS = "native_pss";
os/PerformanceCollector.java:     * used by the native heap.
os/PerformanceCollector.java:    public static final String METRIC_KEY_NATIVE_SHARED_DIRTY = "native_shared_dirty";
os/PerformanceCollector.java:     * In a snapshot Bundle, this key reports the size of the native heap.
os/PerformanceCollector.java:    public static final String METRIC_KEY_NATIVE_SIZE = "native_size";
os/PerformanceCollector.java:     *         <li>{@link #METRIC_KEY_NATIVE_ALLOCATED native_allocated}
os/PerformanceCollector.java:     *         <li>{@link #METRIC_KEY_NATIVE_FREE native_free}
os/PerformanceCollector.java:     *         <li>{@link #METRIC_KEY_NATIVE_PRIVATE_DIRTY native_private_dirty}
os/PerformanceCollector.java:     *         <li>{@link #METRIC_KEY_NATIVE_PSS native_pss}
os/PerformanceCollector.java:     *         <li>{@link #METRIC_KEY_NATIVE_SHARED_DIRTY native_shared_dirty}
os/PerformanceCollector.java:     *         <li>{@link #METRIC_KEY_NATIVE_SIZE native_size}
os/PerformanceCollector.java:        long nativeMax = Debug.getNativeHeapSize() / 1024;
os/PerformanceCollector.java:        long nativeAllocated = Debug.getNativeHeapAllocatedSize() / 1024;
os/PerformanceCollector.java:        long nativeFree = Debug.getNativeHeapFreeSize() / 1024;
os/PerformanceCollector.java:        mPerfSnapshot.putLong(METRIC_KEY_NATIVE_SIZE, nativeMax);
os/PerformanceCollector.java:        mPerfSnapshot.putLong(METRIC_KEY_NATIVE_ALLOCATED, nativeAllocated);
os/PerformanceCollector.java:        mPerfSnapshot.putLong(METRIC_KEY_NATIVE_FREE, nativeFree);
os/PerformanceCollector.java:        mPerfSnapshot.putLong(METRIC_KEY_NATIVE_PSS, memInfo.nativePss);
os/PerformanceCollector.java:        mPerfSnapshot.putLong(METRIC_KEY_NATIVE_PRIVATE_DIRTY, memInfo.nativePrivateDirty);
os/PerformanceCollector.java:        mPerfSnapshot.putLong(METRIC_KEY_NATIVE_SHARED_DIRTY, memInfo.nativeSharedDirty);
os/MemoryFile.java:    private static native FileDescriptor native_open(String name, int length) throws IOException;
os/MemoryFile.java:    private static native int native_mmap(FileDescriptor fd, int length, int mode)
os/MemoryFile.java:    private static native void native_munmap(int addr, int length) throws IOException;
os/MemoryFile.java:    private static native void native_close(FileDescriptor fd);
os/MemoryFile.java:    private static native int native_read(FileDescriptor fd, int address, byte[] buffer,
os/MemoryFile.java:    private static native void native_write(FileDescriptor fd, int address, byte[] buffer,
os/MemoryFile.java:    private static native void native_pin(FileDescriptor fd, boolean pin) throws IOException;
os/MemoryFile.java:    private static native int native_get_mapped_size(FileDescriptor fd) throws IOException;
os/MemoryFile.java:        mFD = native_open(name, length);
os/MemoryFile.java:        mAddress = native_mmap(mFD, length, PROT_READ | PROT_WRITE);
os/MemoryFile.java:        mAddress = native_mmap(mFD, length, modeToProt(mode));
os/MemoryFile.java:            native_close(mFD);
os/MemoryFile.java:                native_munmap(mAddress, mLength);
os/MemoryFile.java:            native_pin(mFD, !allowPurging);
os/MemoryFile.java:        return native_read(mFD, mAddress, buffer, srcOffset, destOffset, count, mAllowPurging);
os/MemoryFile.java:        native_write(mFD, mAddress, buffer, srcOffset, destOffset, count, mAllowPurging);
os/MemoryFile.java:        return (native_get_mapped_size(fd) >= 0);
os/MemoryFile.java:        return native_get_mapped_size(fd);
os/MemoryFile.java:     * native_mmap().
os/Binder.java:    public static final native int getCallingPid();
os/Binder.java:    public static final native int getCallingUid();
os/Binder.java:    public static final native long clearCallingIdentity();
os/Binder.java:    public static final native void restoreCallingIdentity(long token);
os/Binder.java:    public static final native void flushPendingCommands();
os/Binder.java:    public static final native void joinThreadPool();
os/Binder.java:    private native final void init();
os/Binder.java:    private native final void destroy();
os/Binder.java:    public native boolean pingBinder();
os/Binder.java:    public native boolean isBinderAlive();
os/Binder.java:    public native String getInterfaceDescriptor() throws RemoteException;
os/Binder.java:    public native boolean transact(int code, Parcel data, Parcel reply,
os/Binder.java:    public native void linkToDeath(DeathRecipient recipient, int flags)
os/Binder.java:    public native boolean unlinkToDeath(DeathRecipient recipient, int flags);
os/Binder.java:    private native final void destroy();
os/Binder.java:            Log.w("BinderNative", "Uncaught exception from death notification",
os/UEventObserver.java:            native_setup();
os/UEventObserver.java:    private static native void native_setup();
os/UEventObserver.java:    private static native int next_event(byte[] buffer);
os/Power.java:    public static native void acquireWakeLock(int lock, String id);
os/Power.java:    public static native void releaseWakeLock(String id);
os/Power.java:    public static native int setScreenState(boolean on);
os/Power.java:    public static native int setLastUserActivityTimeout(long ms);
os/Power.java:    public static native void shutdown();
os/Power.java:        rebootNative(reason);
os/Power.java:    private static native void rebootNative(String reason) throws IOException ;
os/FileUtils.java:    public static native boolean getFileStatus(String path, FileStatus status);
os/FileUtils.java:    public static native int setPermissions(String file, int mode, int uid, int gid);
os/FileUtils.java:    public static native int getPermissions(String file, int[] outPermissions);
os/FileUtils.java:    public static native int getFatVolumeId(String mountPoint);
os/ServiceManager.java:        sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());
os/Build.java:    /** The name of the instruction set (CPU type + ABI convention) of native code. */
os/Hardware.java:    public static native boolean getFlashlightEnabled();
os/Hardware.java:    public static native void setFlashlightEnabled(boolean on);
os/Hardware.java:    public static native void enableCameraFlash(int milliseconds);
os/ParcelFileDescriptor.java:    private static native FileDescriptor getFileDescriptorFromSocket(Socket socket);
os/ParcelFileDescriptor.java:    public native long getStatSize();
os/ParcelFileDescriptor.java:    public native long seekTo(long pos);
os/StatFs.java:    public StatFs(String path) { native_setup(path); }
os/StatFs.java:    public void restat(String path) { native_restat(path); }
os/StatFs.java:    protected void finalize() { native_finalize(); }
os/StatFs.java:    public native int getBlockSize();
os/StatFs.java:    public native int getBlockCount();
os/StatFs.java:    public native int getFreeBlocks();
os/StatFs.java:    public native int getAvailableBlocks();    
os/StatFs.java:    private int mNativeContext;
os/StatFs.java:    private native void native_restat(String path);
os/StatFs.java:    private native void native_setup(String path);
os/StatFs.java:    private native void native_finalize();
pim/EventRecurrence.java:    public native void parse(String recur);
pim/vcard/VCardConfig.java:     * When this flag is on, vCard composer emits alternative "X-" property (like "X-NICKNAME")
provider/Gmail.java:        /** The native content type.*/
provider/Gmail.java:        /** The size of the attachment in its native form.*/
security/Md5MessageDigest.java:    // ptr to native context
security/Md5MessageDigest.java:    private int mNativeMd5Context;
security/Md5MessageDigest.java:    private native void init();
security/Md5MessageDigest.java:    public native void update(byte[] input);  
security/Md5MessageDigest.java:    public native byte[] digest();
security/Md5MessageDigest.java:    native public void reset();
security/Sha1MessageDigest.java:    // ptr to native context
security/Sha1MessageDigest.java:    private int mNativeSha1Context;
security/Sha1MessageDigest.java:    private native void init();
security/Sha1MessageDigest.java:    public native void update(byte[] input);  
security/Sha1MessageDigest.java:    public native byte[] digest();
security/Sha1MessageDigest.java:    native public void reset();
server/BluetoothA2dpService.java:        if (!initNative()) {
server/BluetoothA2dpService.java:            cleanupNative();
server/BluetoothA2dpService.java:        String propValues[] = (String []) getSinkPropertiesNative(path);
server/BluetoothA2dpService.java:                        disconnectSinkNative(mBluetoothService.getObjectPathFromAddress(
server/BluetoothA2dpService.java:        if (!connectSinkNative(path)) {
server/BluetoothA2dpService.java:        if (!disconnectSinkNative(path)) {
server/BluetoothA2dpService.java:    private native boolean initNative();
server/BluetoothA2dpService.java:    private native void cleanupNative();
server/BluetoothA2dpService.java:    private synchronized native boolean connectSinkNative(String path);
server/BluetoothA2dpService.java:    private synchronized native boolean disconnectSinkNative(String path);
server/BluetoothA2dpService.java:    private synchronized native boolean suspendSinkNative(String path);
server/BluetoothA2dpService.java:    private synchronized native boolean resumeSinkNative(String path);
server/BluetoothA2dpService.java:    private synchronized native Object []getSinkPropertiesNative(String path);
server/BluetoothService.java:    private int mNativeData;
server/BluetoothService.java:        classInitNative();
server/BluetoothService.java:        initializeNativeDataNative();
server/BluetoothService.java:        if (isEnabledNative() == 1) {
server/BluetoothService.java:            disableNative();
server/BluetoothService.java:            cleanupNativeDataNative();
server/BluetoothService.java:        tearDownNativeDataNative();
server/BluetoothService.java:        disableNative();
server/BluetoothService.java:            boolean res = (enableNative() == 0);
server/BluetoothService.java:                    disableNative();
server/BluetoothService.java:                if (!setupNativeDataNative()) {
server/BluetoothService.java:        String properties[] = (String [])getAdapterPropertiesNative();
server/BluetoothService.java:        String adapterPath = getAdapterPathNative();
server/BluetoothService.java:        return setAdapterPropertyStringNative(key, value);
server/BluetoothService.java:        return setAdapterPropertyIntegerNative(key, value);
server/BluetoothService.java:        return setAdapterPropertyBooleanNative(key, value ? 1 : 0);
server/BluetoothService.java:        return startDiscoveryNative();
server/BluetoothService.java:        return stopDiscoveryNative();
server/BluetoothService.java:        if (!createPairedDeviceNative(address, 60000 /* 1 minute */)) {
server/BluetoothService.java:        cancelDeviceCreationNative(address);
server/BluetoothService.java:        return removeDeviceNative(getObjectPathFromAddress(address));
server/BluetoothService.java:        return (String [])getDevicePropertiesNative(objectPath);
server/BluetoothService.java:        return setDevicePropertyBooleanNative(getObjectPathFromAddress(address), "Trusted",
server/BluetoothService.java:            ret = discoverServicesNative(path, "");
server/BluetoothService.java:            ret = createDeviceNative(address);
server/BluetoothService.java:            Log.w(TAG, "setPin(" + address + ") called but no native data available, " +
server/BluetoothService.java:        return setPinNative(address, pinString, data.intValue());
server/BluetoothService.java:            Log.w(TAG, "setPasskey(" + address + ") called but no native data available, " +
server/BluetoothService.java:        return setPasskeyNative(address, passkey, data.intValue());
server/BluetoothService.java:            Log.w(TAG, "setPasskey(" + address + ") called but no native data available, " +
server/BluetoothService.java:        return setPairingConfirmationNative(address, confirm, data.intValue());
server/BluetoothService.java:            Log.w(TAG, "cancelUserInputNative(" + address + ") called but no native data " +
server/BluetoothService.java:        return cancelPairingUserInputNative(address, data.intValue());
server/BluetoothService.java:                channel = getDeviceServiceChannelNative(getObjectPathFromAddress(address),
server/BluetoothService.java:                channel = getDeviceServiceChannelNative(getObjectPathFromAddress(address),
server/BluetoothService.java:        int handle = addRfcommServiceRecordNative(serviceName,
server/BluetoothService.java:            removeServiceRecordNative(handle);
server/BluetoothService.java:    private native static void classInitNative();
server/BluetoothService.java:    private native void initializeNativeDataNative();
server/BluetoothService.java:    private native boolean setupNativeDataNative();
server/BluetoothService.java:    private native boolean tearDownNativeDataNative();
server/BluetoothService.java:    private native void cleanupNativeDataNative();
server/BluetoothService.java:    private native String getAdapterPathNative();
server/BluetoothService.java:    private native int isEnabledNative();
server/BluetoothService.java:    private native int enableNative();
server/BluetoothService.java:    private native int disableNative();
server/BluetoothService.java:    private native Object[] getAdapterPropertiesNative();
server/BluetoothService.java:    private native Object[] getDevicePropertiesNative(String objectPath);
server/BluetoothService.java:    private native boolean setAdapterPropertyStringNative(String key, String value);
server/BluetoothService.java:    private native boolean setAdapterPropertyIntegerNative(String key, int value);
server/BluetoothService.java:    private native boolean setAdapterPropertyBooleanNative(String key, int value);
server/BluetoothService.java:    private native boolean startDiscoveryNative();
server/BluetoothService.java:    private native boolean stopDiscoveryNative();
server/BluetoothService.java:    private native boolean createPairedDeviceNative(String address, int timeout_ms);
server/BluetoothService.java:    private native boolean cancelDeviceCreationNative(String address);
server/BluetoothService.java:    private native boolean removeDeviceNative(String objectPath);
server/BluetoothService.java:    private native int getDeviceServiceChannelNative(String objectPath, String uuid,
server/BluetoothService.java:    private native boolean cancelPairingUserInputNative(String address, int nativeData);
server/BluetoothService.java:    private native boolean setPinNative(String address, String pin, int nativeData);
server/BluetoothService.java:    private native boolean setPasskeyNative(String address, int passkey, int nativeData);
server/BluetoothService.java:    private native boolean setPairingConfirmationNative(String address, boolean confirm,
server/BluetoothService.java:            int nativeData);
server/BluetoothService.java:    private native boolean setDevicePropertyBooleanNative(String objectPath, String key,
server/BluetoothService.java:    private native boolean createDeviceNative(String address);
server/BluetoothService.java:    /*package*/ native boolean discoverServicesNative(String objectPath, String pattern);
server/BluetoothService.java:    private native int addRfcommServiceRecordNative(String name, long uuidMsb, long uuidLsb,
server/BluetoothService.java:    private native boolean removeServiceRecordNative(int handle);
server/search/SearchManagerService.java:import android.app.ActivityManagerNative;
server/search/SearchManagerService.java:            ActivityManagerNative.getDefault().registerActivityWatcher(
server/BluetoothEventLoop.java:    private int mNativeData;
server/BluetoothEventLoop.java:    static { classInitNative(); }
server/BluetoothEventLoop.java:    private static native void classInitNative();
server/BluetoothEventLoop.java:        initializeNativeDataNative();
server/BluetoothEventLoop.java:            cleanupNativeDataNative();
server/BluetoothEventLoop.java:        if (!isEventLoopRunningNative()) {
server/BluetoothEventLoop.java:            startEventLoopNative();
server/BluetoothEventLoop.java:        if (isEventLoopRunningNative()) {
server/BluetoothEventLoop.java:            stopEventLoopNative();
server/BluetoothEventLoop.java:        return isEventLoopRunningNative();
server/BluetoothEventLoop.java:    private String checkPairingRequestAndGetAddress(String objectPath, int nativeData) {
server/BluetoothEventLoop.java:        mPasskeyAgentRequestData.put(address, new Integer(nativeData));
server/BluetoothEventLoop.java:    private void onRequestPairingConsent(String objectPath, int nativeData) {
server/BluetoothEventLoop.java:        String address = checkPairingRequestAndGetAddress(objectPath, nativeData);
server/BluetoothEventLoop.java:    private void onRequestPasskeyConfirmation(String objectPath, int passkey, int nativeData) {
server/BluetoothEventLoop.java:        String address = checkPairingRequestAndGetAddress(objectPath, nativeData);
server/BluetoothEventLoop.java:    private void onRequestPasskey(String objectPath, int nativeData) {
server/BluetoothEventLoop.java:        String address = checkPairingRequestAndGetAddress(objectPath, nativeData);
server/BluetoothEventLoop.java:    private void onRequestPinCode(String objectPath, int nativeData) {
server/BluetoothEventLoop.java:        String address = checkPairingRequestAndGetAddress(objectPath, nativeData);
server/BluetoothEventLoop.java:    private void onDisplayPasskey(String objectPath, int passkey, int nativeData) {
server/BluetoothEventLoop.java:        String address = checkPairingRequestAndGetAddress(objectPath, nativeData);
server/BluetoothEventLoop.java:                mBluetoothService.discoverServicesNative(path, "");
server/BluetoothEventLoop.java:    private native void initializeNativeDataNative();
server/BluetoothEventLoop.java:    private native void startEventLoopNative();
server/BluetoothEventLoop.java:    private native void stopEventLoopNative();
server/BluetoothEventLoop.java:    private native boolean isEventLoopRunningNative();
server/BluetoothEventLoop.java:    private native void cleanupNativeDataNative();
speech/tts/TextToSpeech.java: * to release the native resources used by the TextToSpeech engine.
speech/srec/MicrophoneInputStream.java:    private static native int AudioRecordNew(int sampleRate, int fifoDepth);
speech/srec/MicrophoneInputStream.java:    private static native int AudioRecordStart(int audioRecord);
speech/srec/MicrophoneInputStream.java:    private static native int AudioRecordRead(int audioRecord, byte[] b, int offset, int length) throws IOException;
speech/srec/MicrophoneInputStream.java:    private static native void AudioRecordStop(int audioRecord) throws IOException;
speech/srec/MicrophoneInputStream.java:    private static native void AudioRecordDelete(int audioRecord) throws IOException;
speech/srec/Recognizer.java:    // PMem native methods
speech/srec/Recognizer.java:    private static native void PMemInit();
speech/srec/Recognizer.java:    private static native void PMemShutdown();
speech/srec/Recognizer.java:    // SR_Session native methods
speech/srec/Recognizer.java:    private static native void SR_SessionCreate(String filename);
speech/srec/Recognizer.java:    private static native void SR_SessionDestroy();
speech/srec/Recognizer.java:    // SR_Recognizer native methods
speech/srec/Recognizer.java:    private static native void SR_RecognizerStart(int recognizer);
speech/srec/Recognizer.java:    private static native void SR_RecognizerStop(int recognizer);
speech/srec/Recognizer.java:    private static native int SR_RecognizerCreate();
speech/srec/Recognizer.java:    private static native void SR_RecognizerDestroy(int recognizer);
speech/srec/Recognizer.java:    private static native void SR_RecognizerSetup(int recognizer);
speech/srec/Recognizer.java:    private static native void SR_RecognizerUnsetup(int recognizer);
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerIsSetup(int recognizer);
speech/srec/Recognizer.java:    private static native String SR_RecognizerGetParameter(int recognizer, String key);
speech/srec/Recognizer.java:    private static native int SR_RecognizerGetSize_tParameter(int recognizer, String key);
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerGetBoolParameter(int recognizer, String key);
speech/srec/Recognizer.java:    private static native void SR_RecognizerSetParameter(int recognizer, String key, String value);
speech/srec/Recognizer.java:    private static native void SR_RecognizerSetSize_tParameter(int recognizer,
speech/srec/Recognizer.java:    private static native void SR_RecognizerSetBoolParameter(int recognizer, String key,
speech/srec/Recognizer.java:    private static native void SR_RecognizerSetupRule(int recognizer, int grammar,
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerHasSetupRules(int recognizer);
speech/srec/Recognizer.java:    private static native void SR_RecognizerActivateRule(int recognizer, int grammar,
speech/srec/Recognizer.java:    private static native void SR_RecognizerDeactivateRule(int recognizer, int grammar,
speech/srec/Recognizer.java:    private static native void SR_RecognizerDeactivateAllRules(int recognizer);
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerIsActiveRule(int recognizer, int grammar,
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerCheckGrammarConsistency(int recognizer,
speech/srec/Recognizer.java:    private static native int SR_RecognizerPutAudio(int recognizer, byte[] buffer, int offset,
speech/srec/Recognizer.java:    private static native int SR_RecognizerAdvance(int recognizer);
speech/srec/Recognizer.java:    // private static native void SR_RecognizerLoadUtterance(int recognizer,
speech/srec/Recognizer.java:    // private static native void SR_RecognizerLoadWaveFile(int recognizer,
speech/srec/Recognizer.java:    // private static native void SR_RecognizerSetLockFunction(int recognizer,
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerIsSignalClipping(int recognizer);
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerIsSignalDCOffset(int recognizer);
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerIsSignalNoisy(int recognizer);
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerIsSignalTooQuiet(int recognizer);
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerIsSignalTooFewSamples(int recognizer);
speech/srec/Recognizer.java:    private static native boolean SR_RecognizerIsSignalTooManySamples(int recognizer);
speech/srec/Recognizer.java:    // private static native void SR_Recognizer_Change_Sample_Rate (size_t new_sample_rate);
speech/srec/Recognizer.java:    // SR_AcousticState native methods
speech/srec/Recognizer.java:    private static native void SR_AcousticStateReset(int recognizer);
speech/srec/Recognizer.java:    private static native void SR_AcousticStateSet(int recognizer, String state);
speech/srec/Recognizer.java:    private static native String SR_AcousticStateGet(int recognizer);
speech/srec/Recognizer.java:    // SR_Grammar native methods
speech/srec/Recognizer.java:    private static native void SR_GrammarCompile(int grammar);
speech/srec/Recognizer.java:    private static native void SR_GrammarAddWordToSlot(int grammar, String slot,
speech/srec/Recognizer.java:    private static native void SR_GrammarResetAllSlots(int grammar);
speech/srec/Recognizer.java:    // private static native void SR_GrammarAddNametagToSlot(int grammar, String slot,
speech/srec/Recognizer.java:    private static native void SR_GrammarSetupVocabulary(int grammar, int vocabulary);
speech/srec/Recognizer.java:    // private static native void SR_GrammarSetupModels(int grammar, SR_AcousticModels* models);
speech/srec/Recognizer.java:    private static native void SR_GrammarSetupRecognizer(int grammar, int recognizer);
speech/srec/Recognizer.java:    private static native void SR_GrammarUnsetupRecognizer(int grammar);
speech/srec/Recognizer.java:    // private static native void SR_GrammarGetModels(int grammar,SR_AcousticModels** models);
speech/srec/Recognizer.java:    private static native int SR_GrammarCreate();
speech/srec/Recognizer.java:    private static native void SR_GrammarDestroy(int grammar);
speech/srec/Recognizer.java:    private static native int SR_GrammarLoad(String filename);
speech/srec/Recognizer.java:    private static native void SR_GrammarSave(int grammar, String filename);
speech/srec/Recognizer.java:    // private static native void SR_GrammarSetDispatchFunction(int grammar,
speech/srec/Recognizer.java:    // private static native void SR_GrammarSetParameter(int grammar, const
speech/srec/Recognizer.java:    // private static native void SR_GrammarSetSize_tParameter(int grammar,
speech/srec/Recognizer.java:    // private static native void SR_GrammarGetParameter(int grammar, const
speech/srec/Recognizer.java:    // private static native void SR_GrammarGetSize_tParameter(int grammar,
speech/srec/Recognizer.java:    // private static native void SR_GrammarCheckParse(int grammar, const LCHAR*
speech/srec/Recognizer.java:    private static native void SR_GrammarAllowOnly(int grammar, String transcription);
speech/srec/Recognizer.java:    private static native void SR_GrammarAllowAll(int grammar);
speech/srec/Recognizer.java:    // SR_Vocabulary native methods
speech/srec/Recognizer.java:    // private static native int SR_VocabularyCreate();
speech/srec/Recognizer.java:    private static native int SR_VocabularyLoad();
speech/srec/Recognizer.java:    // private static native void SR_VocabularySave(SR_Vocabulary* self,
speech/srec/Recognizer.java:    // private static native void SR_VocabularyAddWord(SR_Vocabulary* self,
speech/srec/Recognizer.java:    // private static native void SR_VocabularyGetLanguage(SR_Vocabulary* self,
speech/srec/Recognizer.java:    private static native void SR_VocabularyDestroy(int vocabulary);
speech/srec/Recognizer.java:    private static native String SR_VocabularyGetPronunciation(int vocabulary, String word);
speech/srec/Recognizer.java:    // SR_RecognizerResult native methods
speech/srec/Recognizer.java:    private static native byte[] SR_RecognizerResultGetWaveform(int recognizer);
speech/srec/Recognizer.java:    private static native int SR_RecognizerResultGetSize(int recognizer);
speech/srec/Recognizer.java:    private static native int SR_RecognizerResultGetKeyCount(int recognizer, int nbest);
speech/srec/Recognizer.java:    private static native String[] SR_RecognizerResultGetKeyList(int recognizer, int nbest);
speech/srec/Recognizer.java:    private static native String SR_RecognizerResultGetValue(int recognizer,
speech/srec/Recognizer.java:    // private static native void SR_RecognizerResultGetLocale(int recognizer, ESR_Locale* locale);
speech/RecognizerIntent.java:     * return results to you via the activity results mechanism.  Alternatively, if you use this
text/AndroidCharacter.java:    public native static void getDirectionalities(char[] src, byte[] dest,
text/AndroidCharacter.java:    public native static boolean mirror(char[] text, int start, int count);
text/AndroidCharacter.java:    public native static char getMirror(char ch);
text/format/Time.java:    native public long normalize(boolean ignoreDst);
text/format/Time.java:    native public void switchTimezone(String timezone);
text/format/Time.java:    native public static int compare(Time a, Time b);
text/format/Time.java:    native private String format1(String format);
text/format/Time.java:    native public String toString();
text/format/Time.java:        if (nativeParse(s)) {
text/format/Time.java:    native private boolean nativeParse(String s);
text/format/Time.java:         if (nativeParse3339(s)) {
text/format/Time.java:     native private boolean nativeParse3339(String s);
text/format/Time.java:    native public void setToNow();
text/format/Time.java:    native public long toMillis(boolean ignoreDst);
text/format/Time.java:    native public void set(long millis);
text/format/Time.java:    native public String format2445();
transform/Transform.java:    native public static void addTaintString(String str, int tag);
transform/Transform.java:    native public static void addTaintObjectArray(Object[] array, int tag);
transform/Transform.java:    native public static void addTaintBooleanArray(boolean[] array, int tag);
transform/Transform.java:    native public static void addTaintCharArray(char[] array, int tag);
transform/Transform.java:    native public static void addTaintByteArray(byte[] array, int tag);
transform/Transform.java:    native public static void addTaintIntArray(int[] array, int tag);
transform/Transform.java:    native public static void addTaintShortArray(short[] array, int tag);
transform/Transform.java:    native public static void addTaintLongArray(long[] array, int tag);
transform/Transform.java:    native public static void addTaintFloatArray(float[] array, int tag);
transform/Transform.java:    native public static void addTaintDoubleArray(double[] array, int tag);
transform/Transform.java:    native public static boolean addTaintBoolean(boolean val, int tag);
transform/Transform.java:    native public static char addTaintChar(char val, int tag);
transform/Transform.java:    native public static byte addTaintByte(byte val, int tag);
transform/Transform.java:    native public static int addTaintInt(int val, int tag);
transform/Transform.java:    native public static long addTaintLong(long val, int tag);
transform/Transform.java:    native public static float addTaintFloat(float val, int tag);
transform/Transform.java:    native public static double addTaintDouble(double val, int tag);
transform/Transform.java:    native public static int getTaintString(String str);
transform/Transform.java:    native public static int getTaintObjectArray(Object[] array);
transform/Transform.java:    native public static int getTaintBooleanArray(boolean[] array);
transform/Transform.java:    native public static int getTaintCharArray(char[] array);
transform/Transform.java:    native public static int getTaintByteArray(byte[] array);
transform/Transform.java:    native public static int getTaintIntArray(int[] array);
transform/Transform.java:    native public static int getTaintShortArray(short[] array);
transform/Transform.java:    native public static int getTaintLongArray(long[] array);
transform/Transform.java:    native public static int getTaintFloatArray(float[] array);
transform/Transform.java:    native public static int getTaintDoubleArray(double[] array);
transform/Transform.java:    native public static int getTaintBoolean(boolean val);
transform/Transform.java:    native public static int getTaintChar(char val);
transform/Transform.java:    native public static int getTaintByte(byte val);
transform/Transform.java:    native public static int getTaintInt(int val);
transform/Transform.java:    native public static int getTaintLong(long val);
transform/Transform.java:    native public static int getTaintFloat(float val);
transform/Transform.java:    native public static int getTaintDouble(double val);
transform/Transform.java:    native public static int getTaintRef(Object obj);
transform/Transform.java:    native public static int getTaintFile(int fd);
transform/Transform.java:    native public static void addTaintFile(int fd, int tag);
transform/Transform.java:    native public static void log(String msg);
transform/Transform.java:    native public static void logPathFromFd(int fd);
transform/Transform.java:    native public static void logPeerFromFd(int fd);
util/FloatMath.java:    public static native float floor(float value);
util/FloatMath.java:    public static native float ceil(float value);
util/FloatMath.java:    public static native float sin(float angle);
util/FloatMath.java:    public static native float cos(float angle);
util/FloatMath.java:    public static native float sqrt(float value);
util/Log.java:    public static native boolean isLoggable(String tag, int level);
util/Log.java:    public static native int println(int priority, String tag, String msg);
util/EventLog.java: * by {@link ByteOrder#nativeOrder()}).
util/EventLog.java:            mBuffer.order(ByteOrder.nativeOrder());
util/EventLog.java:    // We assume that the native methods deal with any concurrency issues.
util/EventLog.java:    public static native int writeEvent(int tag, int value);
util/EventLog.java:    public static native int writeEvent(int tag, long value);
util/EventLog.java:    public static native int writeEvent(int tag, String str);
util/EventLog.java:    public static native int writeEvent(int tag, List list);
util/EventLog.java:    public static native void readEvents(int[] tags, Collection<Event> output)
util/EventLog.java:    public static native void readEvents(String path, Collection<Event> output)
view/WindowManager.java:         * it through native binder calls. */
view/KeyCharacterMap.java:        mPointer = ctor_native(keyboardDevice);
view/KeyCharacterMap.java:            if (get_native(mPointer, keyCode, KeyEvent.META_SHIFT_ON) ==
view/KeyCharacterMap.java:                get_native(mPointer, keyCode, KeyEvent.META_ALT_ON)) {
view/KeyCharacterMap.java:        int ret = get_native(mPointer, keyCode, meta);
view/KeyCharacterMap.java:        return getNumber_native(mPointer, keyCode);
view/KeyCharacterMap.java:            // catch it here instead of in native
view/KeyCharacterMap.java:        return getMatch_native(mPointer, keyCode, chars, modifiers);
view/KeyCharacterMap.java:        return getDisplayLabel_native(mPointer, keyCode);
view/KeyCharacterMap.java:            return getKeyData_native(mPointer, keyCode, results);
view/KeyCharacterMap.java:        long[] keys = getEvents_native(mPointer, chars);
view/KeyCharacterMap.java:        dtor_native(mPointer);
view/KeyCharacterMap.java:        return getKeyboardType_native(mPointer);
view/KeyCharacterMap.java:    private static native int ctor_native(int id);
view/KeyCharacterMap.java:    private static native void dtor_native(int ptr);
view/KeyCharacterMap.java:    private static native char get_native(int ptr, int keycode,
view/KeyCharacterMap.java:    private static native char getNumber_native(int ptr, int keycode);
view/KeyCharacterMap.java:    private static native char getMatch_native(int ptr, int keycode,
view/KeyCharacterMap.java:    private static native char getDisplayLabel_native(int ptr, int keycode);
view/KeyCharacterMap.java:    private static native boolean getKeyData_native(int ptr, int keycode,
view/KeyCharacterMap.java:    private static native int getKeyboardType_native(int ptr);
view/KeyCharacterMap.java:    private static native long[] getEvents_native(int ptr, char[] str);
view/Menu.java:     * alternative actions on the data that is currently displayed -- or/add
view/Menu.java:    static final int CATEGORY_ALTERNATIVE = 0x00040000;
view/Menu.java:     * either the {@link Intent#CATEGORY_ALTERNATIVE} or
view/Menu.java:     * {@link Intent#CATEGORY_SELECTED_ALTERNATIVE} to find activities that have
view/SurfaceHolder.java:     * direct access to the Surface object (usually to pass it to native code).
view/SurfaceSession.java:    /** Forcibly detach native resources associated with this object.
view/SurfaceSession.java:    public native void kill();
view/SurfaceSession.java:    private native void init();
view/SurfaceSession.java:    private native void destroy();
view/MenuItem.java:     * {@link Menu#CATEGORY_SECONDARY}, {@link Menu#CATEGORY_ALTERNATIVE},
view/ViewRoot.java:import android.app.ActivityManagerNative;
view/ViewRoot.java:        nativeAbandonGlCaches();
view/ViewRoot.java:                            nativeShowFPS(canvas, now - sDrawTime);
view/ViewRoot.java:            // TODO: Do this in native
view/ViewRoot.java:                        nativeShowFPS(canvas, now - sDrawTime);
view/ViewRoot.java:                return ActivityManagerNative.getDefault().checkPermission(
view/ViewRoot.java:    private static native void nativeShowFPS(Canvas canvas, int durationMillis);
view/ViewRoot.java:    private static native void nativeAbandonGlCaches();
view/Display.java:                nativeClassInit();
view/Display.java:    native static int getDisplayCount();
view/Display.java:    native public int getWidth();
view/Display.java:    native public int getHeight();
view/Display.java:    native public int getOrientation();
view/Display.java:     * We use a class initializer to allow the native code to cache some
view/Display.java:    native private static void nativeClassInit();
view/Display.java:    private native void init(int display);
view/Display.java:    // Following fields are initialized from native code
view/Surface.java:     * We use a class initializer to allow the native code to cache some
view/Surface.java:    native private static void nativeClassInit();
view/Surface.java:    static { nativeClassInit(); }
view/Surface.java:     *  <li> Returns the width and height of the target metrics, rather than native.
view/Surface.java:    public native   void copyFrom(Surface o);
view/Surface.java:    public native   boolean isValid();
view/Surface.java:    public native void destroy();
view/Surface.java:    public native void release();
view/Surface.java:        return lockCanvasNative(dirty);
view/Surface.java:    private native Canvas lockCanvasNative(Rect dirty);
view/Surface.java:    public native   void unlockCanvasAndPost(Canvas canvas);
view/Surface.java:    public native   void unlockCanvas(Canvas canvas);
view/Surface.java:    public static native   void openTransaction();
view/Surface.java:    public static native   void closeTransaction();
view/Surface.java:    public static native   void freezeDisplay(int display);
view/Surface.java:    public static native   void unfreezeDisplay(int display);
view/Surface.java:    public static native   void setOrientation(int display, int orientation, int flags);
view/Surface.java:    public native   void setLayer(int zorder);
view/Surface.java:    public native   void setPosition(int x, int y);
view/Surface.java:    public native   void setSize(int w, int h);
view/Surface.java:    public native   void hide();
view/Surface.java:    public native   void show();
view/Surface.java:    public native   void setTransparentRegionHint(Region region);
view/Surface.java:    public native   void setAlpha(float alpha);
view/Surface.java:    public native   void setMatrix(float dsdx, float dtdx,
view/Surface.java:    public native   void freeze();
view/Surface.java:    public native   void unfreeze();
view/Surface.java:    public native   void setFreezeTint(int tint);
view/Surface.java:    public native   void setFlags(int flags, int mask);
view/Surface.java:        return "Surface(native-token=" + mSurfaceControl + ")";
view/Surface.java:    public native   void readFromParcel(Parcel source);
view/Surface.java:    public native   void writeToParcel(Parcel dest, int flags);
view/Surface.java:    private native void init(SurfaceSession s,
view/Surface.java:    private native void init(Parcel source);
view/inputmethod/EditorInfo.java:     * Set of bits in {@link #imeOptions} that provide alternative actions
view/inputmethod/EditorInfo.java:     * to provide alternative mechanisms for providing that command.
webkit/WebBackForwardList.java:    /*package*/ synchronized void close(int nativeFrame) {
webkit/WebBackForwardList.java:        // Clear the array first because nativeClose will call addHistoryItem
webkit/WebBackForwardList.java:        nativeClose(nativeFrame);
webkit/WebBackForwardList.java:        // native BackForwardList.
webkit/WebBackForwardList.java:    /*package*/ static native synchronized void restoreIndex(int nativeFrame,
webkit/WebBackForwardList.java:    /* Close the native list. */
webkit/WebBackForwardList.java:    private static native void nativeClose(int nativeFrame);
webkit/WebSettings.java:    // BrowserFrame used to access the native frame pointer.
webkit/WebSettings.java:    // Private settings so we don't have to go into native code to
webkit/WebSettings.java:    // native WebCore code.
webkit/WebSettings.java:                                if (mBrowserFrame.mNativeFrame != 0) {
webkit/WebSettings.java:                                    nativeSync(mBrowserFrame.mNativeFrame);
webkit/WebSettings.java:            junit.framework.Assert.assertTrue(frame.mNativeFrame != 0);
webkit/WebSettings.java:        nativeSync(frame.mNativeFrame);
webkit/WebSettings.java:    /* Post a SYNC message to handle syncing the native settings. */
webkit/WebSettings.java:    // Synchronize the native and java settings.
webkit/WebSettings.java:    private native void nativeSync(int nativeFrame);
webkit/LoadListener.java:    private static int sNativeLoaderCount;
webkit/LoadListener.java:    private int      mNativeLoader;
webkit/LoadListener.java:            int nativeLoader, boolean synchronous, boolean isMainPageLoader) {
webkit/LoadListener.java:        sNativeLoaderCount += 1;
webkit/LoadListener.java:            context, frame, url, nativeLoader, synchronous, isMainPageLoader);
webkit/LoadListener.java:    public static int getNativeLoaderCount() {
webkit/LoadListener.java:        return sNativeLoaderCount;
webkit/LoadListener.java:            int nativeLoader, boolean synchronous, boolean isMainPageLoader) {
webkit/LoadListener.java:        mNativeLoader = nativeLoader;
webkit/LoadListener.java:     * We keep a count of refs to the nativeLoader so we do not create
webkit/LoadListener.java:    private void clearNativeLoader() {
webkit/LoadListener.java:        sNativeLoaderCount -= 1;
webkit/LoadListener.java:        mNativeLoader = 0;
webkit/LoadListener.java:                if (mNativeLoader != 0 && !ignoreCallbacks()) {
webkit/LoadListener.java:     * IMPORTANT: as this is called from network thread, can't call native
webkit/LoadListener.java:                mNativeLoader != 0) {
webkit/LoadListener.java:     * IMPORTANT: as this is called from network thread, can't call native
webkit/LoadListener.java:     * IMPORTANT: as this is called from network thread, can't call native
webkit/LoadListener.java:     * IMPORTANT: as this is called from network thread, can't call native
webkit/LoadListener.java:     * IMPORTANT: as this is called from network thread, can't call native
webkit/LoadListener.java:     * IMPORTANT: as this is called from network thread, can't call native
webkit/LoadListener.java:     * IMPORTANT: as this is called from network thread, can't call native
webkit/LoadListener.java:     * This function is called from native WebCore code to
webkit/LoadListener.java:        // The native loader object will get cleared by the call to
webkit/LoadListener.java:     * This function is called from native WebCore code to
webkit/LoadListener.java:        int nativeResponse = createNativeResponse();
webkit/LoadListener.java:        // The native code deletes the native response object.
webkit/LoadListener.java:        nativeReceivedResponse(nativeResponse);
webkit/LoadListener.java:     * nativeReceivedResponse or nativeRedirectedToUrl
webkit/LoadListener.java:     * @return native response pointer
webkit/LoadListener.java:    private int createNativeResponse() {
webkit/LoadListener.java:        final int nativeResponse = nativeCreateResponse(
webkit/LoadListener.java:                        nativeSetResponseHeader(nativeResponse, name, value);
webkit/LoadListener.java:        return nativeResponse;
webkit/LoadListener.java:                nativeAddData(c.mArray, c.mLength);
webkit/LoadListener.java:            checker.responseAlert("res nativeAddData");
webkit/LoadListener.java:            // nativeFinish, which in turn calls loader.cancel().
webkit/LoadListener.java:        if (mNativeLoader != 0) {
webkit/LoadListener.java:            nativeFinished();
webkit/LoadListener.java:            checker.responseAlert("res nativeFinished");
webkit/LoadListener.java:            clearNativeLoader();
webkit/LoadListener.java:        if (mNativeLoader != 0) {
webkit/LoadListener.java:            nativeError(getErrorID(), description, url());
webkit/LoadListener.java:            clearNativeLoader();
webkit/LoadListener.java:        clearNativeLoader();
webkit/LoadListener.java:            int nativeResponse = createNativeResponse();
webkit/LoadListener.java:                    nativeRedirectedToUrl(mUrl, redirectTo, nativeResponse);
webkit/LoadListener.java:            // nativeRedirectedToUrl() may call cancel(), e.g. when redirect
webkit/LoadListener.java:                nativeAddData(text.getBytes(), text.length());
webkit/LoadListener.java:                nativeFinished();
webkit/LoadListener.java:                clearNativeLoader();
webkit/LoadListener.java:    // native functions
webkit/LoadListener.java:     * Create a new native response object.
webkit/LoadListener.java:     * @return The native response pointer.
webkit/LoadListener.java:    private native int nativeCreateResponse(String url, int statusCode,
webkit/LoadListener.java:     * Add a response header to the native object.
webkit/LoadListener.java:     * @param nativeResponse The native pointer.
webkit/LoadListener.java:    private native void nativeSetResponseHeader(int nativeResponse, String key,
webkit/LoadListener.java:     * @param nativeResponse The native pointer.
webkit/LoadListener.java:    private native void nativeReceivedResponse(int nativeResponse);
webkit/LoadListener.java:    private native void nativeAddData(byte[] data, int length);
webkit/LoadListener.java:    private native void nativeFinished();
webkit/LoadListener.java:     * @param nativeResponse The native pointer.
webkit/LoadListener.java:    private native String nativeRedirectedToUrl(String baseUrl,
webkit/LoadListener.java:            String redirectTo, int nativeResponse);
webkit/LoadListener.java:    private native void nativeError(int id, String desc, String failingUrl);
webkit/GeolocationService.java:    private long mNativeObject;
webkit/GeolocationService.java:     * @param nativeObject The native object to which this object will report position updates and
webkit/GeolocationService.java:    public GeolocationService(long nativeObject) {
webkit/GeolocationService.java:        mNativeObject = nativeObject;
webkit/GeolocationService.java:        // that we receive callbacks after unregistering. At this point, the native object will no
webkit/GeolocationService.java:            nativeNewLocationAvailable(mNativeObject, location);
webkit/GeolocationService.java:        // No need to notify the native side. It's enough to start sending
webkit/GeolocationService.java:        // that we receive callbacks after unregistering. At this point, the native object will no
webkit/GeolocationService.java:            nativeNewErrorAvailable(mNativeObject, message);
webkit/GeolocationService.java:    // Native functions
webkit/GeolocationService.java:    private static native void nativeNewLocationAvailable(long nativeObject, Location location);
webkit/GeolocationService.java:    private static native void nativeNewErrorAvailable(long nativeObject, String message);
webkit/WebTextView.java:                if (!mWebView.nativeCursorMatchesFocus()) {
webkit/WebTextView.java:                && mWebView.nativeFocusNodePointer() != mNodePointer) {
webkit/WebTextView.java:            mWebView.nativeClearCursor();
webkit/WebTextView.java:            if (!mWebView.nativeCursorMatchesFocus()) {
webkit/WebTextView.java:        // multiple newlines in the native textarea.
webkit/WebTextView.java:            // native from both trackball and key handling. As this is called
webkit/WebTextView.java:            // from WebTextView, we always want WebView to check with native.
webkit/WebTextView.java:            outAttrs.fieldName = mWebView.nativeFocusCandidateName() + "\\"
webkit/WebTextView.java:            mWebView.nativeMoveCursorToNextTextInput();
webkit/WebTextView.java:        // events, we will pass them to native (after replacing the beginning
webkit/WebTextView.java:                // We never send modifier keys to native code so don't send them
webkit/WebTextView.java:        if (!mWebView.nativeCursorMatchesFocus()) {
webkit/WebTextView.java:            int action = mWebView.nativeTextFieldAction();
webkit/BrowserFrame.java:    // Note: need to keep these in sync with FrameLoaderTypes.h in native
webkit/BrowserFrame.java:    // This is a field accessed by native code as well as package classes.
webkit/BrowserFrame.java:    /*package*/ int mNativeFrame;
webkit/BrowserFrame.java:            // set WebCore native cache size
webkit/BrowserFrame.java:        nativeCreateFrame(w, am, proxy.getBackForwardList());
webkit/BrowserFrame.java:            nativeLoadUrl(url);
webkit/BrowserFrame.java:        nativePostUrl(url, data);
webkit/BrowserFrame.java:        nativeLoadData(baseUrl, data, mimeType, encoding, failUrl);
webkit/BrowserFrame.java:        nativeGoBackOrForward(steps);
webkit/BrowserFrame.java:     * native callback
webkit/BrowserFrame.java:     * native callback
webkit/BrowserFrame.java:     * native callback
webkit/BrowserFrame.java:     * native callback
webkit/BrowserFrame.java:     * Destroy all native components of the BrowserFrame.
webkit/BrowserFrame.java:        nativeDestroyFrame();
webkit/BrowserFrame.java:                nativeCallPolicyFunction(msg.arg1, msg.arg2);
webkit/BrowserFrame.java:        // FIXME: The activity must call getTitle (a native method) to get the
webkit/BrowserFrame.java:    private native String externalRepresentation();
webkit/BrowserFrame.java:    private native String documentAsText();
webkit/BrowserFrame.java:    private void windowObjectCleared(int nativeFramePointer) {
webkit/BrowserFrame.java:                nativeAddJavascriptInterface(nativeFramePointer,
webkit/BrowserFrame.java:     * @param loaderHandle The native ResourceLoader that is the target of the
webkit/BrowserFrame.java:        if (LoadListener.getNativeLoaderCount() > MAX_OUTSTANDING_REQUESTS) {
webkit/BrowserFrame.java:            // nativeError will remove the request from its DocLoader's request
webkit/BrowserFrame.java:     * Set the progress for the browser activity.  Called by native code.
webkit/BrowserFrame.java:    // native functions
webkit/BrowserFrame.java:     * Create a new native frame for a given WebView
webkit/BrowserFrame.java:     * @param list  The native side will add and remove items from this list as
webkit/BrowserFrame.java:     *              the native list changes.
webkit/BrowserFrame.java:    private native void nativeCreateFrame(WebViewCore w, AssetManager am,
webkit/BrowserFrame.java:     * Destroy the native frame.
webkit/BrowserFrame.java:    public native void nativeDestroyFrame();
webkit/BrowserFrame.java:    private native void nativeCallPolicyFunction(int policyFunction,
webkit/BrowserFrame.java:    public native void reload(boolean allowStale);
webkit/BrowserFrame.java:    private native void nativeGoBackOrForward(int steps);
webkit/BrowserFrame.java:    public native String stringByEvaluatingJavaScriptFromString(String script);
webkit/BrowserFrame.java:    private native void nativeAddJavascriptInterface(int nativeFramePointer,
webkit/BrowserFrame.java:     * Enable or disable the native cache.
webkit/BrowserFrame.java:    /* FIXME: The native cache is always on for now until we have a better
webkit/BrowserFrame.java:    private native void setCacheDisabled(boolean disabled);
webkit/BrowserFrame.java:    public native boolean cacheDisabled();
webkit/BrowserFrame.java:    public native void clearCache();
webkit/BrowserFrame.java:    private native void nativeLoadUrl(String url);
webkit/BrowserFrame.java:    private native void nativePostUrl(String url, byte[] postData);
webkit/BrowserFrame.java:    private native void nativeLoadData(String baseUrl, String data,
webkit/BrowserFrame.java:        nativeStopLoading();
webkit/BrowserFrame.java:    private native void nativeStopLoading();
webkit/BrowserFrame.java:    public native boolean documentHasImages();
webkit/BrowserFrame.java:    private native boolean hasPasswordField();
webkit/BrowserFrame.java:    private native String[] getUsernamePassword();
webkit/BrowserFrame.java:    private native void setUsernamePassword(String username, String password);
webkit/BrowserFrame.java:    private native HashMap getFormTextData();
webkit/WebView.java:    // Native WebView pointer that is 0 until the native object has been
webkit/WebView.java:    private int mNativeClass;
webkit/WebView.java:    // Remember the last dimensions we sent to the native side so we can avoid
webkit/WebView.java:        if (mNativeClass != 0) {
webkit/WebView.java:            nativeDestroy();
webkit/WebView.java:            mNativeClass = 0;
webkit/WebView.java:                // Check the index bounds so we don't crash in native code while
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        nativeClearCursor(); // start next trackball movement from page edge
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        nativeClearCursor(); // start next trackball movement from page edge
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        if (nativeHasCursorNode()) {
webkit/WebView.java:            if (nativeCursorIsTextInput()) {
webkit/WebView.java:                String text = nativeCursorText();
webkit/WebView.java:                    } else if (nativeCursorIsAnchor()) {
webkit/WebView.java:            String text = nativeImageURI(contentX, contentY);
webkit/WebView.java:        if (hrefMsg == null || mNativeClass == 0) {
webkit/WebView.java:        if (nativeCursorIsAnchor()) {
webkit/WebView.java:                    nativeCursorFramePointer(), nativeCursorNodePointer(),
webkit/WebView.java:        if (0 == mNativeClass) return; // client isn't initialized
webkit/WebView.java:        String ref = nativeImageURI(contentX, contentY);
webkit/WebView.java:                    nativeMoveGeneration(), 0, pos);
webkit/WebView.java:         * Because the native side may have already done a layout before the
webkit/WebView.java:        if (0 == mNativeClass) return; // client isn't initialized
webkit/WebView.java:        nativeFindNext(forward);
webkit/WebView.java:        if (0 == mNativeClass) return 0; // client isn't initialized
webkit/WebView.java:        int result = nativeFindAll(find.toLowerCase(), find.toUpperCase());
webkit/WebView.java:        return WebViewCore.nativeFindAddress(addr, caseInsensitive);
webkit/WebView.java:        nativeSetFindIsDown();
webkit/WebView.java:            // native side to ensure that WebCore has the correct dimensions.
webkit/WebView.java:        // Tell the native side if user is a) touching the screen,
webkit/WebView.java:        // If mNativeClass is 0, we should not reach here, so we do not
webkit/WebView.java:        nativeRecordButtons(hasFocus() && hasWindowFocus(),
webkit/WebView.java:        // if mNativeClass is 0, the WebView has been destroyed. Do nothing.
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        if (mNativeClass != 0 && nativeCursorIsTextInput()) {
webkit/WebView.java:            // FIXME: When we start respecting changes to the native textfield's
webkit/WebView.java:            mWebViewCore.sendMessage(EventHub.CLICK, nativeCursorFramePointer(),
webkit/WebView.java:                    nativeCursorNodePointer());
webkit/WebView.java:        Rect contentBounds = nativeFocusCandidateNodeBounds();
webkit/WebView.java:                            contentToViewDimension(nativeFocusCandidateTextSize()));
webkit/WebView.java:            if (nativeFocusCandidateIsPassword()) {
webkit/WebView.java:                if (nativeFocusCandidateIsPassword()) {
webkit/WebView.java:        if (mNativeClass == 0) return;
webkit/WebView.java:                nativeDrawSelectionRegion(canvas);
webkit/WebView.java:                nativeDrawSelection(canvas, mInvActualScale, getTitleHeight(),
webkit/WebView.java:            nativeDrawCursorRing(canvas);
webkit/WebView.java:            nativeDrawMatches(canvas);
webkit/WebView.java:        result.mMoveGeneration = nativeMoveGeneration();
webkit/WebView.java:        result.mFrame = nativeCursorFramePointer();
webkit/WebView.java:        Point position = nativeCursorPosition();
webkit/WebView.java:        if (0 == mNativeClass || !nativeFocusCandidateIsTextInput()) {
webkit/WebView.java:                contentToViewDimension(nativeFocusCandidateTextSize()));
webkit/WebView.java:        Rect bounds = nativeFocusCandidateNodeBounds();
webkit/WebView.java:        String text = nativeFocusCandidateText();
webkit/WebView.java:        int nodePointer = nativeFocusCandidatePointer();
webkit/WebView.java:                    && nativeTextGeneration() == mTextGeneration) {
webkit/WebView.java:            mWebTextView.setGravity(nativeFocusCandidateIsRtlText() ?
webkit/WebView.java:            boolean isTextField = nativeFocusCandidateIsTextField();
webkit/WebView.java:                maxLength = nativeFocusCandidateMaxLength();
webkit/WebView.java:                String name = nativeFocusCandidateName();
webkit/WebView.java:            mWebTextView.setInPassword(nativeFocusCandidateIsPassword());
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        if (mShiftIsPressed == false && nativeCursorWantsKeyEvents() == false
webkit/WebView.java:            if (nativeHasCursorNode()) {
webkit/WebView.java:                Rect rect = nativeCursorNodeBounds();
webkit/WebView.java:            nativeHideCursor();
webkit/WebView.java:                // Already checked mNativeClass, so we do not need to check it
webkit/WebView.java:                nativeRecordButtons(hasFocus() && hasWindowFocus(), true, true);
webkit/WebView.java:                    nativeDumpDisplayTree(getUrl());
webkit/WebView.java:                    nativeInstrumentReport();
webkit/WebView.java:        if (nativeCursorIsPlugin()) {
webkit/WebView.java:            nativeUpdatePluginReceivesEvents();
webkit/WebView.java:        } else if (nativeCursorIsTextInput()) {
webkit/WebView.java:            mWebViewCore.sendMessage(EventHub.CLICK, nativeCursorFramePointer(),
webkit/WebView.java:                    nativeCursorNodePointer());
webkit/WebView.java:        } else if (nativeHasFocusNode()) {
webkit/WebView.java:        if (nativeCursorWantsKeyEvents() || true) {
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        if (keyCode == KeyEvent.KEYCODE_CALL && nativeHasCursorNode()) {
webkit/WebView.java:            String text = nativeCursorText();
webkit/WebView.java:            if (!nativeCursorIsTextInput() && text != null
webkit/WebView.java:            if (!nativeCursorIntersects(visibleRect)) {
webkit/WebView.java:            nativeSetFollowedLink(true);
webkit/WebView.java:            nativeUpdatePluginReceivesEvents();
webkit/WebView.java:            boolean isTextInput = nativeCursorIsTextInput();
webkit/WebView.java:                        nativeCursorText())) {
webkit/WebView.java:                        nativeCursorNodePointer());
webkit/WebView.java:        if (nativeCursorWantsKeyEvents() || true) {
webkit/WebView.java:        if (0 == mNativeClass) return; // client isn't initialized
webkit/WebView.java:        nativeHideCursor();
webkit/WebView.java:            Region selection = new Region(nativeGetSelection());
webkit/WebView.java:                if (mNativeClass != 0) {
webkit/WebView.java:                    nativeRecordButtons(true, false, true);
webkit/WebView.java:                // We do not call nativeRecordButtons here because we assume
webkit/WebView.java:            if (mNativeClass != 0) {
webkit/WebView.java:                nativeRecordButtons(false, false, true);
webkit/WebView.java:        // mNativeClass is only set if mWebViewCore is non null
webkit/WebView.java:        if (mNativeClass == 0) return;
webkit/WebView.java:                if (mNativeClass != 0) {
webkit/WebView.java:                    nativeRecordButtons(true, false, true);
webkit/WebView.java:                // called nativeRecordButtons(false...)
webkit/WebView.java:                if (mNativeClass != 0) {
webkit/WebView.java:                    nativeRecordButtons(false, false, true);
webkit/WebView.java:            if (inEditingMode() && nativeFocusCandidateIsPassword()) {
webkit/WebView.java:        if (mNativeClass == 0 || !isClickable() || !isLongClickable()) {
webkit/WebView.java:                    nativeMoveSelection(viewToContentX(mSelectX),
webkit/WebView.java:                        nativeMoveSelection(viewToContentX(mSelectX),
webkit/WebView.java:                        nativeHideCursor();
webkit/WebView.java:        nativeHideCursor();
webkit/WebView.java:            if (mNativeClass == 0) {
webkit/WebView.java:            nativeRecordButtons(hasFocus() && hasWindowFocus(), true, true);
webkit/WebView.java:                    && !mLastCursorBounds.equals(nativeGetCursorRingBounds())) {
webkit/WebView.java:                nativeSelectBestAt(mLastCursorBounds);
webkit/WebView.java:        // TODO: alternatively we can do panning as touch does
webkit/WebView.java:        if (mNativeClass == 0)
webkit/WebView.java:        nativeMoveSelection(viewToContentX(mSelectX),
webkit/WebView.java:        // TODO: alternatively we can disallow this during draw history mode
webkit/WebView.java:        // TODO: alternatively we can disallow this during draw history mode
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        nativeSelectBestAt(rect);
webkit/WebView.java:        if (nativeFocusNodePointer() != nativeCursorNodePointer()) {
webkit/WebView.java:            nativeMotionUp(x, y, mNavSlop);
webkit/WebView.java:        nativeTextInputMotionUp(x, y);
webkit/WebView.java:            nativeTextInputMotionUp(x, y);
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        if (nativeMotionUp(contentX, contentY, mNavSlop)) {
webkit/WebView.java:        if (nativeHasCursorNode() && !nativeCursorIsTextInput()) {
webkit/WebView.java:            int left = nativeGetBlockLeftEdge(mAnchorX, mAnchorY, mActualScale);
webkit/WebView.java:        psd.mFrame = nativeCursorFramePointer();
webkit/WebView.java:        psd.mNode = nativeCursorNodePointer();
webkit/WebView.java:                if (mNativeClass != 0 && !nativeHasCursorNode()) {
webkit/WebView.java:        if (mNativeClass != 0) {
webkit/WebView.java:            nativeSetHeightCanMeasure(mHeightCanMeasure);
webkit/WebView.java:        if (nativeCursorWantsKeyEvents() && !nativeCursorMatchesFocus()) {
webkit/WebView.java:                int select = nativeFocusCandidateIsTextField() ?
webkit/WebView.java:                        nativeFocusCandidateMaxLength() : 0;
webkit/WebView.java:                    // nativeCreate sets mNativeClass to a non-zero value
webkit/WebView.java:                    nativeCreate(msg.arg1);
webkit/WebView.java:                    if (nativePluginEatsNavKey()) {
webkit/WebView.java:                    if (inEditingMode() && nativeCursorIsTextInput()) {
webkit/WebView.java:        if (mNativeClass == 0) {
webkit/WebView.java:        if (ignorePlugin == false && nativePluginEatsNavKey()) {
webkit/WebView.java:        mLastCursorBounds = nativeGetCursorRingBounds();
webkit/WebView.java:                = nativeMoveCursor(keyCode, count, noScroll) == false;
webkit/WebView.java:        Rect contentCursorRingBounds = nativeGetCursorRingBounds();
webkit/WebView.java:        nativeDebugDump();
webkit/WebView.java:        nativeUpdateCachedTextfield(updatedText, mTextGeneration);
webkit/WebView.java:    /* package */ native void nativeClearCursor();
webkit/WebView.java:    private native void     nativeCreate(int ptr);
webkit/WebView.java:    private native int      nativeCursorFramePointer();
webkit/WebView.java:    private native Rect     nativeCursorNodeBounds();
webkit/WebView.java:    /* package */ native int nativeCursorNodePointer();
webkit/WebView.java:    /* package */ native boolean nativeCursorMatchesFocus();
webkit/WebView.java:    private native boolean  nativeCursorIntersects(Rect visibleRect);
webkit/WebView.java:    private native boolean  nativeCursorIsAnchor();
webkit/WebView.java:    private native boolean  nativeCursorIsPlugin();
webkit/WebView.java:    private native boolean  nativeCursorIsTextInput();
webkit/WebView.java:    private native Point    nativeCursorPosition();
webkit/WebView.java:    private native String   nativeCursorText();
webkit/WebView.java:     * Returns true if the native cursor node says it wants to handle key events
webkit/WebView.java:     * (ala plugins). This can only be called if mNativeClass is non-zero!
webkit/WebView.java:    private native boolean  nativeCursorWantsKeyEvents();
webkit/WebView.java:    private native void     nativeDebugDump();
webkit/WebView.java:    private native void     nativeDestroy();
webkit/WebView.java:    private native void     nativeDrawCursorRing(Canvas content);
webkit/WebView.java:    private native void     nativeDrawMatches(Canvas canvas);
webkit/WebView.java:    private native void     nativeDrawSelection(Canvas content, float scale,
webkit/WebView.java:    private native void     nativeDrawSelectionRegion(Canvas content);
webkit/WebView.java:    private native void     nativeDumpDisplayTree(String urlOrNull);
webkit/WebView.java:    private native int      nativeFindAll(String findLower, String findUpper);
webkit/WebView.java:    private native void     nativeFindNext(boolean forward);
webkit/WebView.java:    private native boolean  nativeFocusCandidateIsPassword();
webkit/WebView.java:    private native boolean  nativeFocusCandidateIsRtlText();
webkit/WebView.java:    private native boolean  nativeFocusCandidateIsTextField();
webkit/WebView.java:    private native boolean  nativeFocusCandidateIsTextInput();
webkit/WebView.java:    private native int      nativeFocusCandidateMaxLength();
webkit/WebView.java:    /* package */ native String   nativeFocusCandidateName();
webkit/WebView.java:    private native Rect     nativeFocusCandidateNodeBounds();
webkit/WebView.java:    /* package */ native int nativeFocusCandidatePointer();
webkit/WebView.java:    private native String   nativeFocusCandidateText();
webkit/WebView.java:    private native int      nativeFocusCandidateTextSize();
webkit/WebView.java:    /* package */ native int nativeFocusNodePointer();
webkit/WebView.java:    private native Rect     nativeGetCursorRingBounds();
webkit/WebView.java:    private native Region   nativeGetSelection();
webkit/WebView.java:    private native boolean  nativeHasCursorNode();
webkit/WebView.java:    private native boolean  nativeHasFocusNode();
webkit/WebView.java:    private native void     nativeHideCursor();
webkit/WebView.java:    private native String   nativeImageURI(int x, int y);
webkit/WebView.java:    private native void     nativeInstrumentReport();
webkit/WebView.java:    /* package */ native void nativeMoveCursorToNextTextInput();
webkit/WebView.java:    private native boolean  nativeMotionUp(int x, int y, int slop);
webkit/WebView.java:    private native boolean  nativeMoveCursor(int keyCode, int count,
webkit/WebView.java:    private native int      nativeMoveGeneration();
webkit/WebView.java:    private native void     nativeMoveSelection(int x, int y,
webkit/WebView.java:    private native boolean  nativePluginEatsNavKey();
webkit/WebView.java:    // Like many other of our native methods, you must make sure that
webkit/WebView.java:    // mNativeClass is not null before calling this method.
webkit/WebView.java:    private native void     nativeRecordButtons(boolean focused,
webkit/WebView.java:    private native void     nativeSelectBestAt(Rect rect);
webkit/WebView.java:    private native void     nativeSetFindIsDown();
webkit/WebView.java:    private native void     nativeSetFollowedLink(boolean followed);
webkit/WebView.java:    private native void     nativeSetHeightCanMeasure(boolean measure);
webkit/WebView.java:    /* package */ native int  nativeTextFieldAction();
webkit/WebView.java:     * focused, there is no need to go through the nativeMotionUp code, which
webkit/WebView.java:    private native void     nativeTextInputMotionUp(int x, int y);
webkit/WebView.java:    private native int      nativeTextGeneration();
webkit/WebView.java:    private native void     nativeUpdateCachedTextfield(String updatedText,
webkit/WebView.java:    private native void     nativeUpdatePluginReceivesEvents();
webkit/WebView.java:    private native int      nativeGetBlockLeftEdge(int x, int y, float scale);
webkit/HTML5VideoViewProxy.java:    int mNativePointer;
webkit/HTML5VideoViewProxy.java:     * @param nativePtr is the C++ pointer to the MediaPlayerPrivate object.
webkit/HTML5VideoViewProxy.java:    private HTML5VideoViewProxy(WebView webView, int nativePtr) {
webkit/HTML5VideoViewProxy.java:        // Save the native ptr
webkit/HTML5VideoViewProxy.java:        mNativePointer = nativePtr;
webkit/HTML5VideoViewProxy.java:                        nativeOnPrepared(duration.intValue(), width.intValue(),
webkit/HTML5VideoViewProxy.java:                                height.intValue(), mNativePointer);
webkit/HTML5VideoViewProxy.java:                        nativeOnEnded(mNativePointer);
webkit/HTML5VideoViewProxy.java:                        nativeOnPosterFetched(poster, mNativePointer);
webkit/HTML5VideoViewProxy.java:        mNativePointer = 0;
webkit/HTML5VideoViewProxy.java:    public static HTML5VideoViewProxy getInstance(WebViewCore webViewCore, int nativePtr) {
webkit/HTML5VideoViewProxy.java:        return new HTML5VideoViewProxy(webViewCore.getWebView(), nativePtr);
webkit/HTML5VideoViewProxy.java:    private native void nativeOnPrepared(int duration, int width, int height, int nativePointer);
webkit/HTML5VideoViewProxy.java:    private native void nativeOnEnded(int nativePointer);
webkit/HTML5VideoViewProxy.java:    private native void nativeOnPosterFetched(Bitmap poster, int nativePointer);
webkit/WebStorage.java:     * WebCore thread from outside the WebViewCore class (as the native call
webkit/WebStorage.java:                            nativeSetQuotaForOrigin(website.getOrigin(),
webkit/WebStorage.java:                            nativeDeleteOrigin(website.getOrigin());
webkit/WebStorage.java:                            nativeDeleteAllData();
webkit/WebStorage.java:                nativeSetQuotaForOrigin(origin, quota);
webkit/WebStorage.java:                nativeDeleteOrigin(origin);
webkit/WebStorage.java:            nativeDeleteAllData();
webkit/WebStorage.java:        Set<String> tmp = nativeGetOrigins();
webkit/WebStorage.java:                                 nativeGetUsageForOrigin(origin),
webkit/WebStorage.java:                                 nativeGetQuotaForOrigin(origin));
webkit/WebStorage.java:    // Native functions
webkit/WebStorage.java:    private static native Set nativeGetOrigins();
webkit/WebStorage.java:    private static native long nativeGetUsageForOrigin(String origin);
webkit/WebStorage.java:    private static native long nativeGetQuotaForOrigin(String origin);
webkit/WebStorage.java:    private static native void nativeSetQuotaForOrigin(String origin, long quota);
webkit/WebStorage.java:    private static native void nativeDeleteOrigin(String origin);
webkit/WebStorage.java:    private static native void nativeDeleteAllData();
webkit/JWebCoreJavaBridge.java:    // Native object pointer for interacting in native code.
webkit/JWebCoreJavaBridge.java:    private int mNativeBridge;
webkit/JWebCoreJavaBridge.java:        nativeConstructor();
webkit/JWebCoreJavaBridge.java:        nativeFinalize();
webkit/JWebCoreJavaBridge.java:     * Call native timer callbacks.
webkit/JWebCoreJavaBridge.java:                nativeServiceFuncPtrQueue();
webkit/JWebCoreJavaBridge.java:                nativeUpdatePluginDirectories(PluginManager.getInstance(null)
webkit/JWebCoreJavaBridge.java:    private native void nativeServiceFuncPtrQueue();
webkit/JWebCoreJavaBridge.java:    public native void setCacheSize(int bytes);
webkit/JWebCoreJavaBridge.java:    private native void nativeConstructor();
webkit/JWebCoreJavaBridge.java:    private native void nativeFinalize();
webkit/JWebCoreJavaBridge.java:    private native void sharedTimerFired();
webkit/JWebCoreJavaBridge.java:    private native void nativeUpdatePluginDirectories(String[] directories,
webkit/JWebCoreJavaBridge.java:    public native void setNetworkOnLine(boolean online);
webkit/GeolocationPermissions.java:                            nativeClear((String) msg.obj);
webkit/GeolocationPermissions.java:                            nativeAllow((String) msg.obj);
webkit/GeolocationPermissions.java:                            nativeClearAll();
webkit/GeolocationPermissions.java:                    nativeClear(origin);
webkit/GeolocationPermissions.java:                    nativeAllow(origin);
webkit/GeolocationPermissions.java:        mOrigins = nativeGetOrigins();
webkit/GeolocationPermissions.java:        mAllowed = nativeGetAllowed(origin);
webkit/GeolocationPermissions.java:    // Native functions, run on the WebKit thread.
webkit/GeolocationPermissions.java:    private static native Set nativeGetOrigins();
webkit/GeolocationPermissions.java:    private static native boolean nativeGetAllowed(String origin);
webkit/GeolocationPermissions.java:    private static native void nativeClear(String origin);
webkit/GeolocationPermissions.java:    private static native void nativeAllow(String origin);
webkit/GeolocationPermissions.java:    private static native void nativeClearAll();
webkit/MockGeolocation.java:        nativeSetPosition(latitude, longitude, accuracy);
webkit/MockGeolocation.java:        nativeSetError(code, message);
webkit/MockGeolocation.java:    // Native functions
webkit/MockGeolocation.java:    private static native void nativeSetPosition(double latitude, double longitude, double accuracy);
webkit/MockGeolocation.java:    private static native void nativeSetError(int code, String message);
webkit/WebIconDatabase.java:                                nativeOpen((String) msg.obj);
webkit/WebIconDatabase.java:                                nativeClose();
webkit/WebIconDatabase.java:                                nativeRemoveAllIcons();
webkit/WebIconDatabase.java:                                Bitmap icon = nativeIconForPageUrl(url);
webkit/WebIconDatabase.java:                                nativeRetainIconForPageUrl((String) msg.obj);
webkit/WebIconDatabase.java:                                nativeReleaseIconForPageUrl((String) msg.obj);
webkit/WebIconDatabase.java:    // Native functions
webkit/WebIconDatabase.java:    private static native void nativeOpen(String path);
webkit/WebIconDatabase.java:    private static native void nativeClose();
webkit/WebIconDatabase.java:    private static native void nativeRemoveAllIcons();
webkit/WebIconDatabase.java:    private static native Bitmap nativeIconForPageUrl(String url);
webkit/WebIconDatabase.java:    private static native void nativeRetainIconForPageUrl(String url);
webkit/WebIconDatabase.java:    private static native void nativeReleaseIconForPageUrl(String url);
webkit/PluginStub.java: * through the native interface.
webkit/PluginStub.java:     * @param NPP The native NPP instance.
webkit/PluginStub.java:     * @param NPP The native NPP instance.
webkit/WebHistoryItem.java:        mUrl = null; // This will be updated natively
webkit/WebHistoryItem.java:    /*package*/ void inflate(int nativeFrame) {
webkit/WebHistoryItem.java:        inflate(nativeFrame, mFlattenedData);
webkit/WebHistoryItem.java:    /* Natively inflate this item, this method is called in the WebCore thread.
webkit/WebHistoryItem.java:    private native void inflate(int nativeFrame, byte[] data);
webkit/WebViewCore.java:     * WebViewCore always executes in the same thread as the native webkit.
webkit/WebViewCore.java:    // Proxy for handling callbacks from native code
webkit/WebViewCore.java:    // The pointer to a native view object.
webkit/WebViewCore.java:    private int mNativeClass;
webkit/WebViewCore.java:    // The BrowserFrame is an interface to the native Frame component.
webkit/WebViewCore.java:        // Sync the native settings and also create the WebCore thread handler.
webkit/WebViewCore.java:                    mNativeClass, 0).sendToTarget();
webkit/WebViewCore.java:        // that encapsulates a call to the nativeSetDatabaseQuota method to
webkit/WebViewCore.java:                            nativeSetNewStorageLimit(quota);
webkit/WebViewCore.java:                        nativeSetNewStorageLimit(quota);
webkit/WebViewCore.java:    static native String nativeFindAddress(String addr, boolean caseInsensitive);
webkit/WebViewCore.java:    private native void nativeClearContent();
webkit/WebViewCore.java:    private native void nativeCopyContentToPicture(Picture picture);
webkit/WebViewCore.java:    private native boolean nativeDrawContent(Canvas canvas, int color);
webkit/WebViewCore.java:    private native boolean nativePictureReady();
webkit/WebViewCore.java:    private native boolean nativeRecordContent(Region invalRegion, Point wh);
webkit/WebViewCore.java:     * thread after nativeDrawContent returns true.
webkit/WebViewCore.java:    private native void nativeSplitContent();
webkit/WebViewCore.java:    private native boolean nativeKey(int keyCode, int unichar,
webkit/WebViewCore.java:    private native void nativeClick(int framePtr, int nodePtr);
webkit/WebViewCore.java:    private native void nativeSendListBoxChoices(boolean[] choices, int size);
webkit/WebViewCore.java:    private native void nativeSendListBoxChoice(int choice);
webkit/WebViewCore.java:        (see nativeSetZoom).
webkit/WebViewCore.java:        should this be called nativeSetViewPortSize?
webkit/WebViewCore.java:    private native void nativeSetSize(int width, int height, int screenWidth,
webkit/WebViewCore.java:    private native int nativeGetContentMinPrefWidth();
webkit/WebViewCore.java:    private native void nativeReplaceTextfieldText(
webkit/WebViewCore.java:    private native void passToJs(int gen,
webkit/WebViewCore.java:    private native void nativeSetFocusControllerActive(boolean active);
webkit/WebViewCore.java:    private native void nativeSaveDocumentState(int frame);
webkit/WebViewCore.java:    private native void nativeMoveMouse(int framePtr, int x, int y);
webkit/WebViewCore.java:    private native void nativeMoveMouseIfLatest(int moveGeneration,
webkit/WebViewCore.java:    private native String nativeRetrieveHref(int framePtr, int nodePtr);
webkit/WebViewCore.java:    private native void nativeTouchUp(int touchGeneration,
webkit/WebViewCore.java:    private native boolean nativeHandleTouchEvent(int action, int x, int y);
webkit/WebViewCore.java:    private native void nativeUpdateFrameCache();
webkit/WebViewCore.java:    private native void nativeSetBackgroundColor(int color);
webkit/WebViewCore.java:    private native void nativeDumpDomTree(boolean useFile);
webkit/WebViewCore.java:    private native void nativeDumpRenderTree(boolean useFile);
webkit/WebViewCore.java:    private native void nativeDumpNavTree();
webkit/WebViewCore.java:    private native void nativeSetJsFlags(String flags);
webkit/WebViewCore.java:    private native void nativeDeleteSelection(int start, int end,
webkit/WebViewCore.java:    private native void nativeSetSelection(int start, int end);
webkit/WebViewCore.java:    private native String nativeGetSelection(Region sel);
webkit/WebViewCore.java:    private native void nativeRegisterURLSchemeAsLocal(String scheme);
webkit/WebViewCore.java:    private native void nativeSetNewStorageLimit(long limit);
webkit/WebViewCore.java:    private native void nativeUpdatePluginState(int framePtr, int nodePtr, int state);
webkit/WebViewCore.java:    private native void nativeGeolocationPermissionsProvide(String origin, boolean allow, boolean remember);
webkit/WebViewCore.java:    private native void  nativeProvideVisitedHistory(String[] history);
webkit/WebViewCore.java:                            // loads and destroy the native view and frame.
webkit/WebViewCore.java:                                mNativeClass = 0;
webkit/WebViewCore.java:                            nativeUpdateFrameCacheIfLoading();
webkit/WebViewCore.java:                            nativeScrollFocusedTextInput(
webkit/WebViewCore.java:                                        nativeRegisterURLSchemeAsLocal(scheme);
webkit/WebViewCore.java:                            // up with native side
webkit/WebViewCore.java:                            nativeClick(msg.arg1, msg.arg2);
webkit/WebViewCore.java:                            nativeSetScrollOffset(msg.arg1, pt.x, pt.y);
webkit/WebViewCore.java:                            nativeSetGlobalBounds(r.left, r.top, r.width(),
webkit/WebViewCore.java:                            nativePause();
webkit/WebViewCore.java:                            nativeResume();
webkit/WebViewCore.java:                            nativeFreeMemory();
webkit/WebViewCore.java:                            nativeUpdatePluginState(psd.mFrame, psd.mNode, psd.mState);
webkit/WebViewCore.java:                                    close(mBrowserFrame.mNativeFrame);
webkit/WebViewCore.java:                            nativeReplaceTextfieldText(msg.arg1, msg.arg2,
webkit/WebViewCore.java:                            nativeSaveDocumentState(cDat.mFrame);
webkit/WebViewCore.java:                            nativeTouchUp(touchUpData.mMoveGeneration,
webkit/WebViewCore.java:                                    nativeHandleTouchEvent(ted.mAction, ted.mX,
webkit/WebViewCore.java:                            nativeSetFocusControllerActive(msg.arg1 == 1);
webkit/WebViewCore.java:                            nativeMoveMouse(cursorData.mFrame,
webkit/WebViewCore.java:                            nativeMoveMouseIfLatest(cData.mMoveGeneration,
webkit/WebViewCore.java:                            String res = nativeRetrieveHref(msg.arg1, msg.arg2);
webkit/WebViewCore.java:                            nativeUpdateFrameCache();
webkit/WebViewCore.java:                            nativeDeleteSelection(deleteSelectionData.mStart,
webkit/WebViewCore.java:                            nativeSetSelection(msg.arg1, msg.arg2);
webkit/WebViewCore.java:                            nativeSendListBoxChoices(choicesArray,
webkit/WebViewCore.java:                            nativeSendListBoxChoice(msg.arg1);
webkit/WebViewCore.java:                            nativeSetBackgroundColor(msg.arg1);
webkit/WebViewCore.java:                            String str = nativeGetSelection((Region) msg.obj);
webkit/WebViewCore.java:                            nativeDumpDomTree(msg.arg1 == 1);
webkit/WebViewCore.java:                            nativeDumpRenderTree(msg.arg1 == 1);
webkit/WebViewCore.java:                            nativeDumpNavTree();
webkit/WebViewCore.java:                            nativeSetJsFlags((String)msg.obj);
webkit/WebViewCore.java:                            nativeGeolocationPermissionsProvide(data.mOrigin,
webkit/WebViewCore.java:                            nativeSplitContent();
webkit/WebViewCore.java:                            nativeClearContent();
webkit/WebViewCore.java:                            nativeProvideVisitedHistory((String[])msg.obj);
webkit/WebViewCore.java:        if (!nativeKey(keyCode, evt.getUnicodeChar(),
webkit/WebViewCore.java:                     * {@link #nativeGetContentMinPrefWidth} will return a more
webkit/WebViewCore.java:                     * In the worse case, the native width will be adjusted when
webkit/WebViewCore.java:                            nativeGetContentMinPrefWidth()));
webkit/WebViewCore.java:        nativeSetSize(width, width == w ? h : Math.round((float) width * h / w),
webkit/WebViewCore.java:        if (nativeRecordContent(draw.mInvalRegion, draw.mWidthHeight)
webkit/WebViewCore.java:            // Send the native view size that was used during the most recent
webkit/WebViewCore.java:                        nativeGetContentMinPrefWidth());
webkit/WebViewCore.java:        boolean tookTooLong = nativeDrawContent(canvas, color);
webkit/WebViewCore.java:        return 0 != mNativeClass ? nativePictureReady() : false;
webkit/WebViewCore.java:        if (0 != mNativeClass) {
webkit/WebViewCore.java:            nativeCopyContentToPicture(result);
webkit/WebViewCore.java:            list.getItemAtIndex(i).inflate(mBrowserFrame.mNativeFrame);
webkit/WebViewCore.java:        list.restoreIndex(mBrowserFrame.mNativeFrame, index);
webkit/WebViewCore.java:    // Implement abstract methods in WebViewCore, native WebKit callback part
webkit/WebViewCore.java:    private native void setViewportSettingsFromNative();
webkit/WebViewCore.java:        setViewportSettingsFromNative();
webkit/WebViewCore.java:    private native void nativeUpdateFrameCacheIfLoading();
webkit/WebViewCore.java:    private native void nativeScrollFocusedTextInput(float xPercent, int y);
webkit/WebViewCore.java:    private native void nativeSetScrollOffset(int gen, int dx, int dy);
webkit/WebViewCore.java:    private native void nativeSetGlobalBounds(int x, int y, int w, int h);
webkit/WebViewCore.java:    private native void nativePause();
webkit/WebViewCore.java:    private native void nativeResume();
webkit/WebViewCore.java:    private native void nativeFreeMemory();
widget/HorizontalScrollView.java:            //         I agree.  The alternative, which I think would be worse, is to post
widget/LinearLayout.java:        int alternativeMaxWidth = 0;
widget/LinearLayout.java:                alternativeMaxWidth = Math.max(alternativeMaxWidth,
widget/LinearLayout.java:                alternativeMaxWidth = Math.max(alternativeMaxWidth,
widget/LinearLayout.java:            alternativeMaxWidth = Math.max(alternativeMaxWidth,
widget/LinearLayout.java:            maxWidth = alternativeMaxWidth;
widget/LinearLayout.java:        int alternativeMaxHeight = 0;
widget/LinearLayout.java:                alternativeMaxHeight = Math.max(alternativeMaxHeight,
widget/LinearLayout.java:                alternativeMaxHeight = Math.max(alternativeMaxHeight,
widget/LinearLayout.java:            alternativeMaxHeight = Math.max(alternativeMaxHeight, weightedMaxHeight);
widget/LinearLayout.java:            maxHeight = alternativeMaxHeight;
widget/ScrollView.java:            //         I agree.  The alternative, which I think would be worse, is to post
widget/ImageView.java:            nativeInt = ni;
widget/ImageView.java:        final int nativeInt;
widget/ImageView.java:        return sS2FArray[st.nativeInt - 1];
widget/ImageView.java:            // use its native size.
